<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.Internal.AssemblyHelper">
            <summary>
            AssemblyHelper provides static methods for working
            with assemblies.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Gets the AssemblyName of an assembly.
            </summary>
            <param name="assembly">The assembly</param>
            <returns>An AssemblyName</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.Load(System.String)">
            <summary>
            Loads an assembly given a string, which is the AssemblyName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Env">
            <summary>
            Env is a static class that provides some of the features of
            System.Environment that are not available under all runtimes
            </summary>
        </member>
        <member name="F:NUnit.Env.NewLine">
            <summary>
            The newline sequence in the current environment.
            </summary>
        </member>
        <member name="F:NUnit.Env.DocumentFolder">
            <summary>
            Path to the 'My Documents' folder
            </summary>
        </member>
        <member name="F:NUnit.Env.DefaultWorkDirectory">
            <summary>
            Directory used for file output if not specified on commandline.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Guard">
            <summary>
            Class used to guard against unexpected argument values
            or operations by throwing an appropriate exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if an argument is null
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if a string argument is null or empty
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentInRange(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
            <param name="paramName">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentValid(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
            <param name="paramName">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.OperationValid(System.Boolean,System.String)">
            <summary>
            Throws an InvalidOperationException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
        </member>
        <member name="T:NUnit.Framework.Internal.ILogger">
            <summary>
            Interface for logging within the engine
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Error(System.String)">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Warning(System.String)">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Info(System.String)">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Debug(System.String)">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTrace">
            <summary>
            InternalTrace provides facilities for tracing the execution
            of the NUnit framework. Tests and classes under test may make use 
            of Console writes, System.Diagnostics.Trace or various loggers and
            NUnit itself traps and processes each of them. For that reason, a
            separate internal trace is needed.
            
            Note:
            InternalTrace uses a global lock to allow multiple threads to write
            trace messages. This can easily make it a bottleneck so it must be 
            used sparingly. Keep the trace Level as low as possible and only
            insert InternalTrace writes where they are needed.
            TODO: add some buffering and a separate writer thread as an option.
            TODO: figure out a way to turn on trace in specific classes only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.Initialize(System.IO.TextWriter,NUnit.Framework.Internal.InternalTraceLevel)">
            <summary>
            Initialize the internal trace using a provided TextWriter and level
            </summary>
            <param name="writer">A TextWriter</param>
            <param name="level">The InternalTraceLevel</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.GetLogger(System.String)">
            <summary>
            Get a named Logger
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.GetLogger(System.Type)">
            <summary>
            Get a logger named for a particular Type.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.InternalTrace.Initialized">
            <summary>
            Gets a flag indicating whether the InternalTrace is initialized
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTraceLevel">
            <summary>
            InternalTraceLevel is an enumeration controlling the
            level of detailed presented in the internal log.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Default">
            <summary>
            Use the default settings as specified by the user.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Off">
            <summary>
            Do not display any trace messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Error">
            <summary>
            Display Error messages only
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Warning">
            <summary>
            Display Warning level and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Info">
            <summary>
            Display informational and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Debug">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Verbose">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTraceWriter">
            <summary>
            A trace listener that writes to a separate file per domain
            and process using it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Construct an InternalTraceWriter that writes to a 
            TextWriter provided by the caller.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Write(System.Char)">
            <summary>
            Writes a character to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Write(System.String)">
            <summary>
            Writes a string to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.InternalTraceWriter.Encoding">
            <summary>
            Returns the character encoding in which the output is written.
            </summary>
            <returns>The character encoding in which the output is written.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Logger">
            <summary>
            Provides internal logging to the NUnit framework
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.#ctor(System.String,NUnit.Framework.Internal.InternalTraceLevel,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Logger"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="level">The log level.</param>
            <param name="writer">The writer where logs are sent.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Error(System.String)">
            <summary>
            Logs the message at error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Error(System.String,System.Object[])">
            <summary>
            Logs the message at error level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Warning(System.String)">
            <summary>
            Logs the message at warm level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Warning(System.String,System.Object[])">
            <summary>
            Logs the message at warning level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Info(System.String)">
            <summary>
            Logs the message at info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Info(System.String,System.Object[])">
            <summary>
            Logs the message at info level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Debug(System.String)">
            <summary>
            Logs the message at debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Debug(System.String,System.Object[])">
            <summary>
            Logs the message at debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="T:NUnit.Common.PackageSettings">
            <summary>
            PackageSettings is a static class containing constant values that
            are used as keys in setting up a TestPackage. These values are used in
            the engine and framework. Setting values may be a string, int or bool.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.DebugTests">
            <summary>
            Flag (bool) indicating whether tests are being debugged.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.InternalTraceLevel">
            <summary>
            The InternalTraceLevel for this run. Values are: "Default",
            "Off", "Error", "Warning", "Info", "Debug", "Verbose".
            Default is "Off". "Debug" and "Verbose" are synonyms.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.WorkDirectory">
            <summary>
            Full path of the directory to be used for work and result files.
            This path is provided to tests by the frameowrk TestContext.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.ActiveConfig">
            <summary>
            The name of the config to use in loading a project.
            If not specified, the first config found is used.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.AutoBinPath">
            <summary>
            Bool indicating whether the engine should determine the private
            bin path by examining the paths to all the tests. Defaults to
            true unless PrivateBinPath is specified.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.BasePath">
            <summary>
            The ApplicationBase to use in loading the tests. If not 
            specified, and each assembly has its own process, then the
            location of the assembly is used. For multiple  assemblies
            in a single process, the closest common root directory is used.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.ConfigurationFile">
            <summary>
            Path to the config file to use in running the tests. 
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.DebugAgent">
            <summary>
            Bool flag indicating whether a debugger should be launched at agent 
            startup. Used only for debugging NUnit itself.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.DomainUsage">
            <summary>
            Indicates how to load tests across AppDomains. Values are:
            "Default", "None", "Single", "Multiple". Default is "Multiple"
            if more than one assembly is loaded in a process. Otherwise,
            it is "Single".
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.PrivateBinPath">
            <summary>
            The private binpath used to locate assemblies. Directory paths
            is separated by a semicolon. It's an error to specify this and
            also set AutoBinPath to true.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.MaxAgents">
            <summary>
            The maximum number of test agents permitted to run simultneously. 
            Ignored if the ProcessModel is not set or defaulted to Multiple.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.ProcessModel">
            <summary>
            Indicates how to allocate assemblies to processes. Values are:
            "Default", "Single", "Separate", "Multiple". Default is "Multiple"
            for more than one assembly, "Separate" for a single assembly.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.RuntimeFramework">
            <summary>
            Indicates the desired runtime to use for the tests. Values 
            are strings like "net-4.5", "mono-4.0", etc. Default is to
            use the target framework for which an assembly was built.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.RunAsX86">
            <summary>
            Bool flag indicating that the test should be run in a 32-bit process 
            on a 64-bit system. By default, NUNit runs in a 64-bit process on
            a 64-bit system. Ignored if set on a 32-bit system.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.DisposeRunners">
            <summary>
            Indicates that test runners should be disposed after the tests are executed
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.ShadowCopyFiles">
            <summary>
            Bool flag indicating that the test assemblies should be shadow copied. 
            Defaults to false.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.DefaultTimeout">
            <summary>
            Integer value in milliseconds for the default timeout value
            for test cases. If not specified, there is no timeout except
            as specified by attributes on the tests themselves.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.InternalTraceWriter">
            <summary>
            A TextWriter to which the internal trace will be sent.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.LOAD">
            <summary>
            A list of tests to be loaded. 
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.NumberOfTestWorkers">
            <summary>
            The number of test threads to run for the assembly. If set to
            1, a single queue is used. If set to 0, tests are executed
            directly, without queuing.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.RandomSeed">
            <summary>
            The random seed to be used for this assembly. If specified
            as the value reported from a prior run, the framework should
            generate identical random values for tests as were used for
            that run, provided that no change has been made to the test
            assembly. Default is a random value itself.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.StopOnError">
            <summary>
            If true, execution stops after the first error or failure.
            </summary>
        </member>
        <member name="F:NUnit.Common.PackageSettings.SynchronousEvents">
            <summary>
            If true, use of the event queue is suppressed and test events are synchronous.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ActionTargets">
            <summary>
            The different targets a test action attribute can be applied to
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Default">
            <summary>
            Default target, which is determined by where the action attribute is attached
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Test">
            <summary>
            Target a individual test case
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Suite">
            <summary>
            Target a suite of test cases
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.DefaultTestAssemblyBuilder">
            <summary>
            DefaultTestAssemblyBuilder loads a single assembly and builds a TestSuite
            containing test fixtures present in the assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyBuilder">
            <summary>
            The ITestAssemblyBuilder interface is implemented by a class
            that is able to build a suite of tests given an assembly or 
            an assembly filename.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.String,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests given the filename of an assembly
            </summary>
            <param name="assemblyName">The filename of the assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="F:NUnit.Framework.Api.DefaultTestAssemblyBuilder._defaultSuiteBuilder">
            <summary>
            The default suite builder used by the test assembly builder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.DefaultTestAssemblyBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(System.String,System.Collections.IDictionary)">
            <summary>
            Build a suite of tests given the filename of an assembly
            </summary>
            <param name="assemblyName">The filename of the assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController">
            <summary>
            FrameworkController provides a facade for use in loading, browsing 
            and running tests without requiring a reference to the NUnit 
            framework. All calls are encapsulated in constructors for
            this class and its nested classes, which only require the
            types of the Common Type System as arguments.
            
            The controller supports four actions: Load, Explore, Count and Run.
            They are intended to be called by a driver, which should allow for
            proper sequencing of calls. Load must be called before any of the 
            other actions. The driver may support other actions, such as
            reload on run, by combining these calls.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Compatibility.LongLivedMarshalByRefObject">
            <summary>
            A MarshalByRefObject that lives forever
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Construct a FrameworkController using the default builder and runner.
            </summary>
            <param name="assemblyNameOrPath">The AssemblyName or path to the test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.Reflection.Assembly,System.String,System.Collections.IDictionary)">
            <summary>
            Construct a FrameworkController using the default builder and runner.
            </summary>
            <param name="assembly">The test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.String,System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Construct a FrameworkController, specifying the types to be used
            for the runner and builder. This constructor is provided for
            purposes of development.
            </summary>
            <param name="assemblyNameOrPath">The full AssemblyName or the path to the test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
            <param name="runnerType">The Type of the test runner</param>
            <param name="builderType">The Type of the test builder</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.Reflection.Assembly,System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Construct a FrameworkController, specifying the types to be used
            for the runner and builder. This constructor is provided for
            purposes of development.
            </summary>
            <param name="assembly">The test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
            <param name="runnerType">The Type of the test runner</param>
            <param name="builderType">The Type of the test builder</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.InsertSettingsElement(NUnit.Framework.Interfaces.TNode,System.Collections.IDictionary)">
            <summary>
            Inserts settings element
            </summary>
            <param name="targetNode">Target node</param>
            <param name="settings">Settings dictionary</param>
            <returns>The new node</returns>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Builder">
            <summary>
            Gets the ITestAssemblyBuilder used by this controller instance.
            </summary>
            <value>The builder.</value>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Runner">
            <summary>
            Gets the ITestAssemblyRunner used by this controller instance.
            </summary>
            <value>The runner.</value>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.AssemblyNameOrPath">
            <summary>
            Gets the AssemblyName or the path for which this FrameworkController was created
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Assembly">
            <summary>
            Gets the Assembly for which this
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Settings">
            <summary>
            Gets a dictionary of settings for the FrameworkController
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.FrameworkControllerAction">
            <summary>
            FrameworkControllerAction is the base class for all actions
            performed against a FrameworkController.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.LoadTestsAction">
            <summary>
            LoadTestsAction loads a test into the FrameworkController
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.LoadTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.Object)">
            <summary>
            LoadTestsAction loads the tests in an assembly.
            </summary>
            <param name="controller">The controller.</param>
            <param name="handler">The callback handler.</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.ExploreTestsAction">
            <summary>
            ExploreTestsAction returns info about the tests in an assembly
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.ExploreTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.FrameworkController.ExploreTestsAction"/> class.
            </summary>
            <param name="controller">The controller for which this action is being performed.</param>
            <param name="filter">Filter used to control which tests are included (NYI)</param>
            <param name="handler">The callback handler.</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.CountTestsAction">
            <summary>
            CountTestsAction counts the number of test cases in the loaded TestSuite
            held by the FrameworkController.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.CountTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a CountsTestAction and perform the count of test cases.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite whose cases are to be counted</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.RunTestsAction">
            <summary>
            RunTestsAction runs the loaded TestSuite held by the FrameworkController.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a RunTestsAction and run all tests in the loaded TestSuite.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite to run</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.RunAsyncAction">
            <summary>
            RunAsyncAction initiates an asynchronous test run, returning immediately
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunAsyncAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a RunAsyncAction and run all tests in the loaded TestSuite.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite to run</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.StopRunAction">
            <summary>
            StopRunAction stops an ongoing run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.StopRunAction.#ctor(NUnit.Framework.Api.FrameworkController,System.Boolean,System.Object)">
            <summary>
            Construct a StopRunAction and stop any ongoing run. If no
            run is in process, no error is raised.
            </summary>
            <param name="controller">The FrameworkController for which a run is to be stopped.</param>
            <param name="force">True the stop should be forced, false for a cooperative stop.</param>
            <param name="handler">>A callback handler used to report results</param>
            <remarks>A forced stop will cause threads and processes to be killed as needed.</remarks>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyRunner">
            <summary>
            The ITestAssemblyRunner interface is implemented by classes
            that are able to execute a suite of tests loaded
            from an assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.String,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly, returning an 
            indication of whether or not the load succeeded.
            </summary>
            <param name="assemblyName">File name of the assembly to load</param>
            <param name="settings">Dictionary of options to use in loading the test</param>
            <returns>An ITest representing the loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly, returning an 
            indication of whether or not the load succeeded.
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of options to use in loading the test</param>
            <returns>An ITest representing the loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Count Test Cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The number of test cases found</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive ITestListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests asynchronously, notifying the listener interface as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.WaitForCompletion(System.Int32)">
            <summary>
            Wait for the ongoing run to complete.
            </summary>
            <param name="timeout">Time to wait in milliseconds</param>
            <returns>True if the run completed, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.StopRun(System.Boolean)">
            <summary>
            Signal any test run that is in process to stop. Return without error if no test is running.
            </summary>
            <param name="force">If true, kill any test-running threads</param>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.LoadedTest">
            <summary>
            Gets the tree of loaded tests, or null if
            no tests have been loaded.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.Result">
            <summary>
            Gets the tree of test results, if the test
            run is completed, otherwise null.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestLoaded">
            <summary>
            Indicates whether a test has been loaded
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestRunning">
            <summary>
            Indicates whether a test is currently running
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestComplete">
            <summary>
            Indicates whether a test run is complete
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.NUnitTestAssemblyRunner">
            <summary>
            Implementation of ITestAssemblyRunner
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.#ctor(NUnit.Framework.Api.ITestAssemblyBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.NUnitTestAssemblyRunner"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(System.String,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assemblyName">File name of the assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.IDictionary)">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>True if the load was successful</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Count Test Cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The number of test cases found</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests asynchronously, notifying the listener interface as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
            <remarks>
            RunAsync is a template method, calling various abstract and
            virtual methods to be overridden by derived classes.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion(System.Int32)">
            <summary>
            Wait for the ongoing run to complete.
            </summary>
            <param name="timeout">Time to wait in milliseconds</param>
            <returns>True if the run completed, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.StartRun(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Initiate the test run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.StopRun(System.Boolean)">
            <summary>
            Signal any test run that is in process to stop. Return without error if no test is running.
            </summary>
            <param name="force">If true, kill any test-running threads</param>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.CreateTestExecutionContext(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Create the initial TestExecutionContext used to run tests
            </summary>
            <param name="listener">The ITestListener specified in the RunAsync call</param>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.OnRunCompleted(System.Object,System.EventArgs)">
            <summary>
            Handle the the Completed event for the top level work item
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.LoadedTest">
            <summary>
            The tree of tests that was loaded by the builder
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Result">
            <summary>
            The test result, if a run has completed
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestLoaded">
            <summary>
            Indicates whether a test is loaded
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestRunning">
            <summary>
            Indicates whether a test is running
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestComplete">
            <summary>
            Indicates whether a test run is complete
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Settings">
            <summary>
            Our settings, specified when loading the assembly
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.TopLevelWorkItem">
            <summary>
            The top level WorkItem created for the assembly as a whole
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Context">
            <summary>
            The TestExecutionContext for the top level WorkItem
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first int is greater than the second
            int. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first int is greater than the second
            int. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double})">
            <summary>
            Verifies that the double that is passed in is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is not empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String)">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message that is 
            passed in. This causes the test to be reported as inconclusive. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/>. 
            This causes the test to be reported as Inconclusive. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate does not throw an exception
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.String[])">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. 
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            </summary>
            <remarks>
            This method is provided for use by VB developers needing to test
            the value of properties with private setters.
            </remarks>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="T:NUnit.Framework.TestDelegate">
            <summary>
            Delegate used by tests that execute code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter ids for constraints and
            asserts and avoiding conflict with the definition of 
            <see cref="T:NUnit.Framework.Is"/>, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintFactory">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintFactory.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintFactory.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Assume">
            <summary>
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assume.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the 
            method throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary> 
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="T:NUnit.Framework.AuthorAttribute">
            <summary>
            Provides the Author of a test or test fixture. 
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="T:NUnit.Framework.NUnitAttribute">
            <summary>
            The abstract base class for all custom attributes defined by NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NUnitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IApplyToTest">
            <summary>
            The IApplyToTest interface is implemented by self-applying
            attributes that modify the state of a test in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IApplyToTest.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test as defined for the specific attribute.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding properties to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.AuthorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.AuthorAttribute"/> class.
            </summary>
            <param name="name">The name of the author.</param>
        </member>
        <member name="M:NUnit.Framework.AuthorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.AuthorAttribute"/> class.
            </summary>
            <param name="name">The name of the author.</param>
            <param name="email">The email address of the author.</param>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a category to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument 
            data provided. Since this is the default, the attribute is
            optional.
            </summary>
        </member>
        <member name="T:NUnit.Framework.CombiningStrategyAttribute">
            <summary>
            Marks a test to use a particular CombiningStrategy to join
            any parameter data provided. Since this is the default, the
            attribute is optional.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestBuilder">
            <summary>
            The ITestBuilder interface is exposed by a class that knows how to
            build one or more TestMethods from a MethodInfo. In general, it is exposed
            by an attribute, which has additional information available to provide
            the necessary test parameters to distinguish the test cases built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build one or more TestMethods from the provided MethodInfo.
            </summary>
            <param name="method">The method to be used as a test</param>
            <param name="suite">The TestSuite to which the method will be added</param>
            <returns>A TestMethod object</returns>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.#ctor(NUnit.Framework.Interfaces.ICombiningStrategy)">
            <summary>
            Construct a CombiningStrategyAttribute incorporating an object
            that implements ICombiningStrategy.
            </summary>
            <param name="strategy">Combining strategy to be used</param>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.#ctor(System.Object)">
            <summary>
            Construct a CombiningStrategyAttribute incorporating an object
            that implements ICombiningStrategy. This constructor is provided
            for CLS compliance.
            </summary>
            <param name="strategy">Combining strategy to be used</param>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Construct one or more TestMethods from a given MethodInfo,
            using available parameter data.
            </summary>
            <param name="method">The MethodInfo for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
            <returns>One or more TestMethods</returns>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modify the test by adding the name of the combining strategy
            to the properties.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple items may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Causes a test to be skipped if this CultureAttribute is not satisfied.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported">
            <summary>
            Tests to determine if the current culture is supported
            based on the properties of this attribute.
            </summary>
            <returns>True, if the current culture is supported</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture ids</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of cultures
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.DataAttribute">
            <summary>
            The abstract base class for all data-providing attributes 
            defined by NUnit. Used to select all data sources for a 
            method, class or parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DataAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Used to mark a field, property or method providing a set of datapoints to 
            be used in executing any theories within the same fixture that require an 
            argument of the Type provided. The data source may provide an array of
            the required Type or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Synonymous with DatapointSourceAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointSourceAttribute">
            <summary>
            Used to mark a field, property or method providing a set of datapoints to 
            be used in executing any theories within the same fixture that require an 
            argument of the Type provided. The data source may provide an array of
            the required Type or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Synonymous with DatapointsAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct a description Attribute
            </summary>
            <param name="description">The text of the description</param>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as explicit.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as Ignored.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Until">
            <summary>
            The date in the future to stop ignoring the test as a string in UTC time. 
            For example for a date and time, "2014-12-25 08:10:00Z" or for just a date,
            "2014-12-25". If just a date is given, the Ignore will expire at midnight UTC.
            </summary>
            <remarks>
            Once the ignore until date has passed, the test will be marked
            as runnable. Tests with an ignore until date will have an IgnoreUntilDate
            property set which will appear in the test results.
            </remarks>
            <exception cref="T:System.FormatException">The string does not contain a valid string representation of a date and time.</exception> 
        </member>
        <member name="T:NUnit.Framework.LevelOfParallelismAttribute">
            <summary>
            LevelOfParallelismAttribute is used to set the number of worker threads
            that may be allocated by the framework for running tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.LevelOfParallelismAttribute.#ctor(System.Int32)">
            <summary>
            Construct a LevelOfParallelismAttribute.
            </summary>
            <param name="level">The number of worker threads to be created by the framework.</param>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Summary description for MaxTimeAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IWrapSetUpTearDown">
            <summary>
            Objects implementing this interface are used to wrap
            the entire test, including SetUp and TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ICommandWrapper">
            <summary>
            ICommandWrapper is implemented by attributes and other
            objects able to wrap a TestCommand with another command.
            </summary>
            <remarks>
            Attributes or other objects should implement one of the
            derived interfaces, rather than this one, since they
            indicate in which part of the command chain the wrapper
            should be applied.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ICommandWrapper.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.OneTimeSetUpAttribute">
            <summary>
            Attribute used to identify a method that is called once
            to perform setup before any child tests are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.OneTimeTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called once
            after all the child tests have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test to use a pairwise join of any argument 
            data provided. Arguments will be combined in such a
            way that all possible pairs of arguments are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParallelizableAttribute">
            <summary>
            ParallelizableAttribute is used to mark tests that may be run in parallel.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IApplyToContext">
            <summary>
            The IApplyToContext interface is implemented by attributes
            that want to make changes to the execution context before
            a test is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Apply changes to the execution context
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.#ctor">
            <summary>
            Construct a ParallelizableAttribute using default ParallelScope.Self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.#ctor(NUnit.Framework.ParallelScope)">
            <summary>
            Construct a ParallelizableAttribute with a specified scope.
            </summary>
            <param name="scope">The ParallelScope associated with this attribute.</param>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Modify the context to be used for child tests
            </summary>
            <param name="context">The current TestExecutionContext</param>
        </member>
        <member name="T:NUnit.Framework.ParallelScope">
            <summary>
            The ParallelScope enumeration permits specifying the degree to
            which a test and its descendants may be run in parallel.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.None">
            <summary>
            No Parallelism is permitted
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Self">
            <summary>
            The test itself may be run in parallel with others at the same level
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Children">
            <summary>
            Descendants of the test may be run in parallel with one another
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Fixtures">
            <summary>
            Descendants of the test down to the level of TestFixtures may be run in parallel
            </summary>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            RandomAttribute is used to supply a set of random _values
            to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterDataSource">
            <summary>
            The IParameterDataSource interface is implemented by types
            that can provide data for a test method parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataSource.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Gets an enumeration of data items for use as arguments
            for a test method parameter.
            </summary>
            <param name="parameter">The parameter for which data is needed</param>
            <returns>An enumeration containing individual data items</returns>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a random set of values appropriate for the Type of the 
            parameter on which the attribute appears, specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a set of ints within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Construct a set of unsigned ints within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            Construct a set of longs within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Construct a set of unsigned longs within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int16,System.Int16,System.Int32)">
            <summary>
            Construct a set of shorts within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Construct a set of unsigned shorts within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Construct a set of doubles within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Construct a set of floats within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Byte,System.Byte,System.Int32)">
            <summary>
            Construct a set of bytes within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.SByte,System.SByte,System.Int32)">
            <summary>
            Construct a set of sbytes within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Get the collection of _values to be used as arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            RangeAttribute is used to supply a range of _values to an
            individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor">
            <summary>
            Constructs for use with an Enum parameter. Will pass every enum
            value in to the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Get the collection of _values to be used as arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a range of ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a range of ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct a range of unsigned ints using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a range of unsigned ints specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Construct a range of longs using a default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Construct a range of longs
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Construct a range of unsigned longs using default step of 1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Construct a range of unsigned longs specifying the step size 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a range of doubles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a range of floats
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="step"></param>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute.RepeatedTestCommand">
            <summary>
            The test command for the RepeatAttribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.DelegatingTestCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestCommand">
            <summary>
            TestCommand is the abstract base class for all test commands
            in the framework. A TestCommand represents a single stage in
            the execution of a test, e.g.: SetUp/TearDown, checking for
            Timeout, verifying the returned result from a method, etc.
            
            TestCommands may decorate other test commands so that the
            execution of a lower-level command is nested within that
            of a higher level command. All nested commands are executed
            synchronously, as a single unit. Scheduling test execution
            on separate threads is handled at a higher level, using the
            task dispatcher.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestCommand for a test.
            </summary>
            <param name="test">The test to be executed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test in a specified context, returning a TestResult.
            </summary>
            <param name="context">The TestExecutionContext to be used for running the test.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.TestCommand.Test">
            <summary>
            Gets the test associated with this command.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.DelegatingTestCommand.innerCommand">
            <summary>TODO: Documentation needed for field</summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.DelegatingTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            TODO: Documentation needed for constructor
            </summary>
            <param name="innerCommand"></param>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.RepeatedTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.RepeatAttribute.RepeatedTestCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="repeatCount">The number of repetitions</param>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.RepeatedTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.RetryAttribute">
            <summary>
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="T:NUnit.Framework.RetryAttribute.RetryCommand">
            <summary>
            The test command for the RetryAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.RetryCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.RetryAttribute.RetryCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="retryCount">The number of repetitions</param>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.RetryCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a Sequential join of any argument 
            data provided. Arguments will be combined into test cases,
            taking the next value of each argument until all are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PreTestAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PostTestAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            SetUpFixtureAttribute is used to identify a SetUpFixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IFixtureBuilder">
            <summary>
            The IFixtureBuilder interface is exposed by a class that knows how to
            build a TestFixture from one or more Types. In general, it is exposed
            by an attribute, but may be implemented in a helper class used by the
            attribute in some cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build one or more TestFixtures from type provided. At least one
            non-null TestSuite must always be returned, since the method is 
            generally called because the user has marked the target class as 
            a fixture. If something prevents the fixture from being used, it
            will be returned nonetheless, labelled as non-runnable.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
            <returns>A TestSuite object or one derived from TestSuite.</returns>
        </member>
        <member name="M:NUnit.Framework.SetUpFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build a SetUpFixture from type provided. Normally called for a Type
            on which the attribute has been placed.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
            <returns>A SetUpFixture object as a TestSuite.</returns>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used to identify a method that is called 
            immediately after each test is run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestActionAttribute">
            <summary>
            Provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ITestAction">
            <summary>
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="test">The test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="test">The test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.ITestAction.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
            <returns>The target for the action attribute</returns>
        </member>
        <member name="M:NUnit.Framework.TestActionAttribute.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="test">The test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.TestActionAttribute.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="test">The test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.TestActionAttribute.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              public void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="T:NUnit.Framework.Interfaces.ISimpleTestBuilder">
            <summary>
            The ISimpleTestBuilder interface is exposed by a class that knows how to
            build a single TestMethod from a suitable MethodInfo Types. In general, 
            it is exposed by an attribute, but may be implemented in a helper class 
            used by the attribute in some cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISimpleTestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a TestMethod from the provided MethodInfo.
            </summary>
            <param name="method">The method to be used as a test</param>
            <param name="suite">The TestSuite to which the method will be added</param>
            <returns>A TestMethod object</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IImplyFixture">
            <summary>
            IImplyFixture is an empty marker interface used by attributes like
            TestAttribute that cause the class where they are used to be treated
            as a TestFixture even without a TestFixtureAttribute.
            
            Marker interfaces are not usually considered a good practice, but
            we use it here to avoid cluttering the attribute hierarchy with 
            classes that don't contain any extra implementation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a description, if not already set.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.TestAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestMethod from a given method.
            </summary>
            <param name="method">The method for which a test is to be constructed.</param>
            <param name="suite">The suite to which the test will be added.</param>
            <returns>A TestMethod</returns>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Author">
            <summary>
            The author of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.TestOf">
            <summary>
            The type that this test is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.HasExpectedResult">
            <summary>
            Returns true if an expected result has been set
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestData">
            <summary>
            The ITestData interface is implemented by a class that
            represents a single instance of a parameterized test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.RunState">
            <summary>
            Gets the RunState for this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.Properties">
            <summary>
            Gets the property dictionary for the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestCaseData.ExpectedResult">
            <summary>
            Gets the expected result of the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestCaseData.HasExpectedResult">
            <summary>
            Returns true if an expected result has been set
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.PerformSpecialConversions(System.Object[],NUnit.Framework.Interfaces.IParameterInfo[])">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute or to simplify their use.
            </summary>
            <param name="arglist">The arguments to be converted</param>
            <param name="parameters">The ParameterInfo array for the method</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Construct one or more TestMethods from a given MethodInfo,
            using available parameter data.
            </summary>
            <param name="method">The MethodInfo for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
            <returns>One or more TestMethods</returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.RunState">
            <summary>
            Gets or sets the RunState of this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Properties">
            <summary>
            Gets the properties of the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Returns true if the expected result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Author">
            <summary>
            The author of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestOf">
            <summary>
            The type that this test is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the reason for ignoring the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestCaseAttribute"/> is explicit.
            </summary>
            <value>
            <c>true</c> if explicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. When set to a non-null
            non-empty value, the test is marked as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets and sets the category for this test case.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            TestCaseSourceAttribute indicates the source to be used to
            provide test cases for a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the method, property or field that will provide data
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type
            </summary>
            <param name="sourceType">The type that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Construct one or more TestMethods from a given MethodInfo,
            using available parameter data.
            </summary>
            <param name="method">The IMethod for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
            <returns>One or more TestMethods</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.GetTestCasesFor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Returns a set of ITestCaseDataItems for use as arguments
            to a parameterized test method.
            </summary>
            <param name="method">The method for which data is needed.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with every fixture created from
            this attribute. May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <summary>
            TestFixtureAttribute is used to mark a class that represents a TestFixture.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestFixtureData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return the data required to create an
            instance of a parameterized test fixture.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestFixtureData.TypeArgs">
            <summary>
            Get the TypeArgs if separately set
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build a fixture from type provided. Normally called for a Type
            on which the attribute has been placed.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
            <returns>A an IEnumerable holding one TestFixture object.</returns>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.RunState">
            <summary>
            Gets or sets the RunState of this test fixture.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Properties">
            <summary>
            Properties pertaining to this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Author">
            <summary>
            The author of this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TestOf">
            <summary>
            The type that this fixture is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets the ignore reason. May set RunState as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the fixture.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. When set to a non-null
            non-empty value, the test is marked as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> is explicit.
            </summary>
            <value>
            <c>true</c> if explicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSourceAttribute">
            <summary>
            TestCaseSourceAttribute indicates the source to be used to
            provide test fixture instances for a test class.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestFixtureSourceAttribute.MUST_BE_STATIC">
            <summary>
            Error message string is public so the tests can use it
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the method, property or field that will provide data
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type
            </summary>
            <param name="sourceType">The type that will provide data</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Construct one or more TestFixtures from a given Type,
            using available parameter data.
            </summary>
            <param name="typeInfo">The TypeInfo for which fixures are to be constructed.</param>
            <returns>One or more TestFixtures as TestSuite</returns>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.GetParametersFor(System.Type)">
            <summary>
            Returns a set of ITestFixtureData items for use as arguments
            to a parameterized test fixture.
            </summary>
            <param name="sourceType">The type for which data is needed.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with every fixture created from 
            this attribute. May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestOfAttribute">
            <summary>
            Indicates which class the test or test fixture is testing
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestOfAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestOfAttribute"/> class.
            </summary>
            <param name="type">The type that is being tested.</param>
        </member>
        <member name="M:NUnit.Framework.TestOfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestOfAttribute"/> class.
            </summary>
            <param name="typeName">The type that is being tested.</param>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              public void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="M:NUnit.Framework.TheoryAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Construct one or more TestMethods from a given MethodInfo,
            using available parameter data.
            </summary>
            <param name="method">The MethodInfo for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
            <returns>One or more TestMethods</returns>
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Gets an enumeration of data items for use as arguments
            for a test method parameter.
            </summary>
            <param name="parameter">The parameter for which data is needed</param>
            <returns>
            An enumeration containing individual data items
            </returns>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or fiend to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="T:NUnit.Framework.CollectionAssert">
            <summary>
            A set of Assert methods operating on one or more collections
            </summary>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the superset does not contain the subset
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the superset does not contain the subset
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the superset contains the subset.
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the superset contains the subset.
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the subset does not contain the superset
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the subset does not contain the superset
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the subset contains the superset.
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the subset contains the superset.
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
        </member>
        <member name="T:NUnit.Framework.Compatibility.AttributeHelper">
            <summary>
            Provides a platform-independent methods for getting attributes
            for use by AttributeConstraint and AttributeExistsConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.AttributeHelper.GetCustomAttributes(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes from the given object.
            </summary>
            <remarks>Portable libraries do not have an ICustomAttributeProvider, so we need to cast to each of
            it's direct subtypes and try to get attributes off those instead.</remarks>
            <param name="actual">The actual.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>A list of the given attribute on the given object.</returns>
        </member>
        <member name="T:NUnit.Framework.Compatibility.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members
            and types is conducted by reflection.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.Default">
            <summary>
             Specifies no binding flag.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.DeclaredOnly">
            <summary>
             Specifies that only members declared at the level of the supplied type's hierarchy
             should be considered. Inherited members are not considered.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.Instance">
            <summary>
             Specifies that instance members are to be included in the search.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.Static">
            <summary>
             Specifies that static members are to be included in the search.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.Public">
            <summary>
             Specifies that public members are to be included in the search.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.NonPublic">
            <summary>
             Specifies that non-public members are to be included in the search.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.BindingFlags.FlattenHierarchy">
            <summary>
             Specifies that public and protected static members up the hierarchy should be
             returned. Private static members in inherited classes are not returned. Static
             members include fields, methods, events, and properties. Nested types are not
             returned.
             </summary>
        </member>
        <member name="T:System.Web.UI.ICallbackEventHandler">
            <summary>
            A shim of the .NET interface for platforms that do not support it.
            Used to indicate that a control can be the target of a callback event on the server.
            </summary>
        </member>
        <member name="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)">
            <summary>
            Processes a callback event that targets a control.
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult">
            <summary>
            Returns the results of a callback event that targets a control.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Compatibility.Path">
            <summary>
            Some path based methods that we need even in the Portable framework which
            does not have the System.IO.Path class
            </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.Path.WindowsSeparatorChar">
            <summary>
            Windows directory separator
            </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.Path.AltDirectorySeparatorChar">
            <summary>
            Alternate directory separator
            </summary>
        </member>
        <member name="F:NUnit.Framework.Compatibility.Path.VolumeSeparatorChar">
            <summary>
            A volume separator character.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Path.GetFileName(System.String)">
            <summary>
            Get the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The filename as a <see cref="T:System.String"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty"/>. If <paramref name="path"/> is null, this method returns null.</returns>
        </member>
        <member name="T:NUnit.Framework.Compatibility.TypeExtensions">
            <summary>
            Provides NUnit specific extensions to aid in Reflection
            across multiple frameworks
            </summary>
            <remarks>
            This version of the class allows direct calls on Type on
            those platforms that would normally require use of 
            GetTypeInfo().
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetGenericArguments(System.Type)">
            <summary>
            Returns an array of generic arguments for the give type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetConstructor(System.Type,System.Type[])">
            <summary>
            Gets the constructor with the given parameter types
            </summary>
            <param name="type"></param>
            <param name="ptypes"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetConstructors(System.Type)">
            <summary>
            Gets the constructors for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetInterfaces(System.Type)">
            <summary>
            Gets declared or inherited interfaces on this type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMember(System.Type,System.String,NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Gets the member on a given type by name. BindingFlags ARE IGNORED.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="ignored"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMembers(System.Type,NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Gets all members on a given type. BindingFlags ARE IGNORED.
            </summary>
            <param name="type"></param>
            <param name="ignored"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetField(System.Type,System.String)">
            <summary>
            Gets field of the given name on the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetProperty(System.Type,System.String)">
            <summary>
            Gets property of the given name on the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetProperty(System.Type,System.String,NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Gets property of the given name on the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMethod(System.Type,System.String)">
            <summary>
            Gets the method with the given name and parameter list
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMethod(System.Type,System.String,NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Gets the method with the given name and parameter list
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method with the given name and parameter list
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="ptypes"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMethods(System.Type)">
            <summary>
            Gets public methods on the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.GetMethods(System.Type,NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Gets methods on a type
            </summary>
            <param name="type"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.TypeExtensions.IsCastableFrom(System.Type,System.Type)">
            <summary>
            Determines if one type can be implicitly converted from another
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Compatibility.MemberInfoExtensions">
            <summary>
            Extensions to the various MemberInfo derived classes
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.MemberInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns the get method for the given property
            </summary>
            <param name="pinfo"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this member
            </summary>
            <remarks> Portable throws an argument exception if T does not
            derive from Attribute. NUnit uses interfaces to find attributes, thus
            this method</remarks>
        </member>
        <member name="M:NUnit.Framework.Compatibility.MemberInfoExtensions.GetAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this parameter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.MemberInfoExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this assembly
            </summary>
        </member>
        <member name="T:NUnit.Framework.Compatibility.AssemblyExtensions">
            <summary>
            Extensions for Assembly that are not available in portable
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.AssemblyExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
            DNX does not have a version of GetCustomAttributes on Assembly that takes an inherit
            parameter since it doesn't make sense on Assemblies. This version just ignores the 
            inherit parameter.
            </summary>
            <param name="asm">The assembly</param>
            <param name="attributeType">The type of attribute you are looking for</param>
            <param name="inherit">Ignored</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.AssemblyExtensions.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types in a given assembly
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>
            A shim of the .NET attribute for platforms that do not support it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Compatibility.Stopwatch">
            <summary>
            This class is a System.Diagnostics.Stopwatch on operating systems that support it. On those that don't,
            it replicates the functionality at the resolution supported.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.GetTimestamp">
            <summary>
            Gets the current number of ticks in the timer mechanism.
            </summary>
            <remarks>
            If the Stopwatch class uses a high-resolution performance counter, GetTimestamp returns the current
            value of that counter. If the Stopwatch class uses the system timer, GetTimestamp returns the current 
            DateTime.Ticks property of the DateTime.Now instance.
            </remarks>
            <returns>A long integer representing the tick counter value of the underlying timer mechanism.</returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.StartNew">
            <summary>
            Initializes a new Stopwatch instance, sets the elapsed time property to zero, and starts measuring elapsed time.
            </summary>
            <returns>A Stopwatch that has just begun measuring elapsed time.</returns>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Compatibility.Stopwatch.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:NUnit.Framework.Compatibility.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Compatibility.Stopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the Stopwatch timer is running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Compatibility.Stopwatch.Frequency">
            <summary>
            Gets the frequency of the timer as the number of ticks per second.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Compatibility.Stopwatch.IsHighResolution">
            <summary>
            Indicates whether the timer is based on a high-resolution performance counter.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IConstraint">
            <summary>
            Interface for all constraints
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IResolveConstraint interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns 
            the value to be tested. The default implementation simply evaluates 
            the delegate but derived classes may override it to provide for 
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Arguments">
            <summary>
            Arguments provided to this Constraint, for use in
            formatting the description.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Builder">
            <summary>
            The ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object[])">
            <summary>
            Construct a constraint with optional arguments
            </summary>
            <param name="args">Arguments to be saved</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns 
            the value to be tested. The default implementation simply evaluates 
            the delegate but derived classes may override it to provide for 
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolves any pending operators and returns the resolved constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Arguments">
            <summary>
            Arguments provided to this Constraint, for use in
            formatting the description.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Builder">
            <summary>
            The ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.descriptionPrefix">
            <summary>
            Prefix used in forming the constraint description
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="baseConstraint"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PrefixConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.ApplyTo``1(``0)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.AndConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintResult">
            <summary>
            Contain the result of matching a <see cref="T:NUnit.Framework.Constraints.Constraint"/> against an actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,NUnit.Framework.Constraints.ConstraintStatus)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="status">The status of the new ConstraintResult.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,System.Boolean)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="isSuccess">If true, applies a status of Success to the result, otherwise Failure.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the result and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.ActualValue">
            <summary>
            The actual value that was passed to the <see cref="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)"/> method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Status">
            <summary>
            Gets and sets the ResultStatus for this result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.IsSuccess">
            <summary>
            True if actual value meets the Constraint criteria otherwise false.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Name">
            <summary>
            Display friendly name of the constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Description">
            <summary>
            Description of the constraint may be affected by the state the constraint had
            when <see cref="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)"/> was performed against the actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.AndConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.actualType">
            <summary>
            The type of the actual argument to which the constraint was applied
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type,System.String)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type">The expected type for the constraint</param>
            <param name="descriptionPrefix">Prefix used in forming the constraint description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableToConstraint">
            <summary>
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableToConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attribute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.ApplyTo``1(``0)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.ApplyTo``1(``0)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.AttributeExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            <c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionContainsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionContainsConstraint.Expected">
            <summary>
            Gets the expected object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentConstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionEquivalentConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSubsetConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSupersetConstraint">
            <summary>
            CollectionSupersetConstraint is used to determine whether
            one collection is a superset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSupersetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a superset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a superset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSupersetConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurrences of each object in one or more enumerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a comparer and a collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Object)">
            <summary>
            Try to remove an object from the tally
            </summary>
            <param name="o">The object to remove</param>
            <returns>True if successful, false if the object was not found</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>
            Try to remove a set of objects from the tally
            </summary>
            <param name="c">The objects to remove</param>
            <returns>True if successful, false if any object was not found</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.Count">
            <summary>
            The number of objects remaining in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            _values in NUnit, adapting to the use of any provided
            <see cref="T:System.Collections.IComparer"/>, <see cref="T:System.Collections.Generic.IComparer`1"/>
            or <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an <see cref="T:System.Collections.IComparer"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a <see cref="T:System.Comparison`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an <see cref="T:System.Collections.IComparer"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparerAdapter extends <see cref="T:NUnit.Framework.Constraints.ComparisonAdapter"/> and
            allows use of an <see cref="T:System.Collections.Generic.IComparer`1"/> or <see cref="T:System.Comparison`1"/>
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a <see cref="T:System.Comparison`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare _values to
            determine if one is greater than, equal to or less than
            the other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.lessComparisonResult">
            <summary>
            If true, less than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.equalComparisonResult">
            <summary>
            if true, equal returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.greaterComparisonResult">
            <summary>
            if true, greater than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ComparisonConstraint"/> class.
            </summary>
            <param name="value">The value against which to make a comparison.</param>
            <param name="lessComparisonResult">if set to <c>true</c> less succeeds.</param>
            <param name="equalComparisonResult">if set to <c>true</c> equal succeeds.</param>
            <param name="greaterComparisonResult">if set to <c>true</c> greater succeeds.</param>
            <param name="predicate">String used in describing the constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate`1">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reorganized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expression by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the Builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<c>true</c> if this instance is resolvable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack"/> class.
            </summary>
            <param name="builder">The ConstraintBuilder using this stack.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The operator to put onto the stack.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns>The topmost operator on the stack</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack"/> class.
            </summary>
            <param name="builder">The ConstraintBuilder using this stack.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's Builder field is set to the 
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint to put onto the stack</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constraint from the stack.
            As a side effect, the constraint's Builder
            field is set to null.
            </summary>
            <returns>The topmost contraint on the stack</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
            <summary>
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reorganized. When a constraint is appended, it is returned as the
            value of the operation so that modifiers may be applied. However,
            any partially built expression is attached to the constraint for
            later resolution. When an operator is appended, the partial
            expression is returned. If it's a self-resolving operator, then
            a ResolvableConstraintExpression is returned.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpression.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintExpression"/> 
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built. Note that the constraint
            is not reduced at this time. For example, if there 
            is a NotOperator on the stack we don't reduce and
            return a NotConstraint. The original constraint must
            be returned because it may support modifiers that
            are yet to be applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contain(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintStatus">
            <summary>
            ConstraintStatus represents the status of a ConstraintResult
            returned by a Constraint being applied to an actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Unknown">
            <summary>
            The status has not yet been set
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Success">
            <summary>
            The constraint succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Failure">
            <summary>
            The constraint failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Error">
            <summary>
            An error occured in applying the constraint (reserved for future use)
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ContainsConstraint"/> class.
            </summary>
            <param name="expected">The _expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint">
            <summary>
            DictionaryContainsKeyConstraint is used to test whether a dictionary
            contains an expected object as a key.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.#ctor(System.Object)">
            <summary>
            Construct a DictionaryContainsKeyConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected key is contained in the dictionary
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DictionaryContainsValueConstraint">
            <summary>
            DictionaryContainsValueConstraint is used to test whether a dictionary
            contains an expected object as a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.#ctor(System.Object)">
            <summary>
            Construct a DictionaryContainsValueConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected value is contained in the dictionary
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyCollectionConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyStringConstraint">
            <summary>
            EmptyStringConstraint tests whether a string is empty.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.StringConstraint">
            <summary>
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.expected">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.caseInsensitive">
            <summary>
            Indicates whether tests should be case-insensitive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.descriptionText">
            <summary>
            Description of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor">
            <summary>
            Constructs a StringConstraint without an expected value
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor(System.String)">
            <summary>
            Constructs a StringConstraint given an expected value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given string
            </summary>
            <param name="actual">The string to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyStringConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are 
            considered equal if both are null, or if both have the same 
            value. NUnit has special semantics for some object types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint._comparer">
            <summary>
            NUnitEqualityComparer used to test equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            </summary>
            <param name="amount">Tolerance value to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Tolerance">
            <summary>
            Gets the tolerance for this comparison.
            </summary>
            <value>
            The tolerance.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.CaseInsensitive">
            <summary>
            Gets a value indicating whether to compare case insensitive.
            </summary>
            <value>
              <c>true</c> if comparing case insensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.ClipStrings">
            <summary>
            Gets a value indicating whether or not to clip strings.
            </summary>
            <value>
              <c>true</c> if set to clip strings otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.FailurePoints">
            <summary>
            Gets the failure points.
            </summary>
            <value>
            The failure points.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.NoClip">
            <summary>
            Flag the constraint to suppress string clipping 
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.WithSameOffset">
            <summary>
            Flags the constraint to include <see cref="P:System.DateTimeOffset.Offset"/>
            property in comparison of two <see cref="T:System.DateTimeOffset"/> values.
            </summary>
            <remarks>
            Using this modifier does not allow to use the <see cref="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)"/>
            constraint modifier.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ulps">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable _values (see remarks).
            </summary>
            <returns>Self.</returns>
            <remarks>
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point _values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual _values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Days">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in days.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Hours">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Minutes">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Seconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Milliseconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ticks">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraintResult">
            <summary>
            The EqualConstraintResult class is tailored for formatting
            and displaying the result of an EqualConstraint. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.#ctor(NUnit.Framework.Constraints.EqualConstraint,System.Object,System.Boolean)">
            <summary>
            Construct an EqualConstraintResult
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayCollectionDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayTypesAndSizes(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual collections or arrays. If both are identical, the value is 
            only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayFailurePoint(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both _values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayEnumerableDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Display the failure information for two IEnumerables that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected enumeration.</param>
            <param name="actual">The actual enumeration</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter">
            <summary>
            EqualityAdapter class handles all equality comparisons
            that use an <see cref="T:System.Collections.IEqualityComparer"/>, <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            or a <see cref="T:NUnit.Framework.Constraints.ComparisonAdapter"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer)">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps a <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter">
            <summary>
            <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.GenericEqualityAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            Generic adapter requires objects of the specified type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter`1">
            <summary>
            <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountConstraint">
            <summary>
            ExactCountConstraint applies another constraint to each
            item in a collection, succeeding only if a specified
            number of items succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.#ctor(System.Int32,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct an ExactCountConstraint on top of an existing constraint
            </summary>
            <param name="expectedCount"></param>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding only if the expected number of items pass.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type">The expected Type.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExceptionTypeConstraint">
            <summary>
            ExceptionTypeConstraint is a special version of ExactTypeConstraint
            used to provided detailed info about the exception thrown in
            an error message.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.#ctor(System.Type)">
            <summary>
            Constructs an ExceptionTypeConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.FalseConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics">
            <summary>Helper routines for working with floating point numbers</summary>
            <remarks>
              <para>
                The floating point comparison code is based on this excellent article:
                http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
              </para>
              <para>
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              </para>
              <para>
                If a comparison is allowed "2 ulps" of deviation, that means the _values are
                allowed to deviate by up to 2 adjacent floating point _values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Single,System.Single,System.Int32)">
            <summary>Compares two floating point _values for equality</summary>
            <param name="left">First floating point value to be compared</param>
            <param name="right">Second floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable floating point _values that are allowed to
              be between the left and the right floating point _values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Floating point _values can only represent a finite subset of natural numbers.
                For example, the _values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible floating point _values are between
                the left and the right number. If the number of possible _values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Double,System.Double,System.Int64)">
            <summary>Compares two double precision floating point _values for equality</summary>
            <param name="left">First double precision floating point value to be compared</param>
            <param name="right">Second double precision floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable double precision floating point _values that are
              allowed to be between the left and the right double precision floating point _values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Double precision floating point _values can only represent a limited series of
                natural numbers. For example, the _values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing inbetween them.
              </para>
              <para>
                This comparison will count how many possible double precision floating point
                _values are between the left and the right number. If the number of possible
                _values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsInt(System.Single)">
            <summary>
              Reinterprets the memory contents of a floating point value as an integer value
            </summary>
            <param name="value">
              Floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the floating point value interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsLong(System.Double)">
            <summary>
              Reinterprets the memory contents of a double precision floating point
              value as an integer value
            </summary>
            <param name="value">
              Double precision floating point value whose memory contents to reinterpret
            </param>
            <returns>
              The memory contents of the double precision floating point value
              interpreted as an integer
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsFloat(System.Int32)">
            <summary>
              Reinterprets the memory contents of an integer as a floating point value
            </summary>
            <param name="value">Integer value whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer value interpreted as a floating point value
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.ReinterpretAsDouble(System.Int64)">
            <summary>
              Reinterprets the memory contents of an integer value as a double precision
              floating point value
            </summary>
            <param name="value">Integer whose memory contents to reinterpret</param>
            <returns>
              The memory contents of the integer interpreted as a double precision
              floating point value
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion">
            <summary>Union of a floating point variable and an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Float">
            <summary>The union's value as a floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Int">
            <summary>The union's value as an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.UInt">
            <summary>The union's value as an unsigned integer</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion">
            <summary>Union of a double precision floating point variable and a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Double">
            <summary>The union's value as a double precision floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Long">
            <summary>The union's value as a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.ULong">
            <summary>The union's value as an unsigned long</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type">The expected Type</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="result">The failing constraint result</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given _values. This
            method may be called by constraints that need more control over
            the display of actual and expected _values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given _values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string _values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
            <param name="clipping">If true, the strings should be clipped to fit the line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.ELLIPSIS">
            <summary>
            Static string used when strings are clipped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.Fmt_Null">
            <summary>
            Formatting strings used for expected and actual _values
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FormatValue(System.Object)">
            <summary>
            Formats text to represent a generalized value.
            </summary>
            <param name="val">The value</param>
            <returns>The formatted text</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FormatCollection(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Formats text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeControlChars(System.String)">
            <summary>
            Converts any control characters in a string 
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.IEnumerable,System.Int64)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="clipStart">The point at which to start clipping</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual(System.String@,System.String@,System.Int32,System.Int32)">
            <summary>
            Clip the expected and actual strings in a coordinated fashion, 
            so that they may be displayed together.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="maxDisplayLength"></param>
            <param name="mismatch"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.ApplyTo``1(``0)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NaNConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NullConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric _values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Test two numeric _values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the _values are equal</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric _values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the _values to each other</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer">
            <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.externalComparers">
            <summary>
            Comparison objects used in comparisons for some constraints.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.failurePoints">
            <summary>
            List of points at which a failure occurred.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects for equality within a tolerance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.ArraysEqual(System.Array,System.Array,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Default">
            <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase">
            <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection">
            <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparers">
            <summary>
            Gets the list of external comparers to be used to
            test for equality. They are applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints">
            <summary>
            Gets the list of failure points for the last Match performed.
            The list consists of objects to be interpreted by the caller.
            This generally means that the caller may only make use of
            objects it has placed on the list at a particular depthy.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.WithSameOffset">
            <summary>
            Flags the comparer to include <see cref="P:System.DateTimeOffset.Offset"/>
            property in comparison of two <see cref="T:System.DateTimeOffset"/> values.
            </summary>
            <remarks>
            Using this modifier does not allow to use the <see cref="T:NUnit.Framework.Constraints.Tolerance"/>
            modifier.
            </remarks>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint">
            <summary>
            FailurePoint class represents one point of failure
            in an equality test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.Position">
            <summary>
            The location of the failure
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedValue">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedHasData">
            <summary>
            Indicates whether the expected value is valid
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualHasData">
            <summary>
            Indicates whether the actual value is valid
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllOperator">
            <summary>
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOperator">
            <summary>
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixOperator">
            <summary>
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintOperator">
            <summary>
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            _values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.left_precedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.right_precedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftContext">
            <summary>
            The syntax element preceding this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightContext">
            <summary>
            The syntax element following this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOperator.#ctor">
            <summary>
            Constructs a CollectionOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndOperator">
            <summary>
            Operator that requires both it's arguments to succeed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperator">
            <summary>
            Abstract base class for all binary operators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence">
            <summary>
            Gets the left precedence of the operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.RightPrecedence">
            <summary>
            Gets the right precedence of the operator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.#ctor">
            <summary>
            Construct an AndOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Apply the operator to produce an AndConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeOperator">
            <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SelfResolvingOperator">
            <summary>
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)">
            <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
            <param name="type">The Type of attribute tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountOperator">
            <summary>
            Represents a constraint that succeeds if the specified 
            count of members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.#ctor(System.Int32)">
            <summary>
            Construct an ExactCountOperator for a specified count
            </summary>
            <param name="expectedCount">The expected count</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoneOperator">
            <summary>
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotOperator">
            <summary>
            Negates the test of the constraint it wraps.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.#ctor">
            <summary>
            Constructs a new NotOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a NotConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrOperator">
            <summary>
            Operator that requires at least one of it's arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.#ctor">
            <summary>
            Construct an OrOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Apply the operator to produce an OrConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropOperator">
            <summary>
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.#ctor(System.String)">
            <summary>
            Constructs a PropOperator for a particular named property
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropOperator.Name">
            <summary>
            Gets the name of the property to which the operator applies
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeOperator">
            <summary>
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsOperator">
            <summary>
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.#ctor">
            <summary>
            Construct a ThrowsOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.WithOperator">
            <summary>
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifies the
            order of evaluation because of its precedence.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.#ctor">
            <summary>
            Constructor for the WithOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that wraps its argument
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.OrConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PredicateConstraint`1">
            <summary>
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Construct a PredicateConstraint from a predicate
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.ApplyTo``1(``0)">
            <summary>
            Determines whether the predicate succeeds when applied
            to the actual value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PredicateConstraint`1.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyExistsConstraint">
            <summary>
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the value
            of the property. The two constraints are now separate.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.PropertyExistsConstraint"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the property exists for a given object
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropertyExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.RangeConstraint">
            <summary>
            RangeConstraint tests whether two _values are within a 
            specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.RangeConstraint"/> class.
            </summary>
            <remarks>from must be less than or equal to true</remarks> 
            <param name="from">Inclusive beginning of the range. Must be less than or equal to to.</param>
            <param name="to">Inclusive end of the range. Must be greater than or equal to from.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.RangeConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.RegexConstraint">
            <summary>
            RegexConstraint can test whether a string matches
            the pattern provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.RegexConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ResolvableConstraintExpression">
            <summary>
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor">
            <summary>
            Create a new instance of ResolvableConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolve the current expression to a Constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.And">
            <summary>
            Appends an And Operator to the expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.Or">
            <summary>
            Appends an Or operator to the expression.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            ReusableConstraint wraps a constraint expression after
            resolving it so that it can be reused consistently.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct a ReusableConstraint from a constraint expression
            </summary>
            <param name="c">The expression to be resolved and reused</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.op_Implicit(NUnit.Framework.Constraints.Constraint)~NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            Converts a constraint to a ReusableConstraint
            </summary>
            <param name="c">The constraint to be converted</param>
            <returns>A ReusableConstraint</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.SameAsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsConstraint">
            <summary>
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ThrowsConstraint"/> class,
            using a constraint to be applied to the exception.
            </summary>
            <param name="baseConstraint">A constraint to apply to the caught exception.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo``1(``0)">
            <summary>
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown and the constraint succeeds, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.ActualException">
            <summary>
            Get the actual exception thrown - used by Assert.Throws.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ThrowsConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. This override only handles the special message
            used when an exception is expected but none is thrown.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsExceptionConstraint">
            <summary>
            ThrowsExceptionConstraint tests that an exception has
            been thrown, without any further tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsExceptionConstraint.ApplyTo``1(``0)">
            <summary>
            Executes the code and returns success if an exception is thrown.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsExceptionConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsNothingConstraint">
            <summary>
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True if no exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns 
            the value to be tested. The default implementation simply evaluates 
            the delegate but derived classes may override it to provide for 
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsNothingConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance">
            <summary>
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object)">
            <summary>
            Constructs a linear tolerance of a specified amount
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Constructs a tolerance given an amount and <see cref="T:NUnit.Framework.Constraints.ToleranceMode"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.CheckLinearAndNumeric">
            <summary>
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Default">
            <summary>
            Returns a default Tolerance object, equivalent to 
            specifying an exact match unless <see cref="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance"/>
            is set, in which case, the <see cref="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance"/>
            will be used.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Exact">
            <summary>
            Returns an empty Tolerance object, equivalent to 
            specifying an exact match even if 
            <see cref="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance"/> is set.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Mode">
            <summary>
            Gets the <see cref="T:NUnit.Framework.Constraints.ToleranceMode"/> for the current Tolerance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Value">
            <summary>
            Gets the value of the current Tolerance instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Percent">
            <summary>
            Returns a new tolerance, using the current amount as a percentage.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ulps">
            <summary>
            Returns a new tolerance, using the current amount in Ulps
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Days">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of days.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Hours">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of hours.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Minutes">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Seconds">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Milliseconds">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ticks">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of clock ticks.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.IsUnsetOrDefault">
            <summary>
            Returns true if the current tolerance has not been set or is using the .
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ToleranceMode">
            <summary>
            Modes in which the tolerance value for a comparison can be interpreted.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Unset">
            <summary>
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Linear">
            <summary>
            The tolerance is used as a numeric range within which
            two compared _values are considered to be equal.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Percent">
            <summary>
            Interprets the tolerance as the percentage by which
            the two compared _values my deviate from each other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Ulps">
            <summary>
            Compares two _values based in their distance in
            representable numbers.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.TrueConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.UniqueItemsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Contains">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Item(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Key(System.Object)">
            <summary>
            Returns a new DictionaryContainsKeyConstraint checking for the
            presence of a particular key in the dictionary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Value(System.Object)">
            <summary>
            Returns a new DictionaryContainsValueConstraint checking for the
            presence of a particular value in the dictionary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Substring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Does">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Contain(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Contain(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Does.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ResultStateException">
            <summary>
            Abstract base for Exceptions that terminate a test and provide a ResultState.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ResultStateException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.ResultStateException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="P:NUnit.Framework.ResultStateException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="P:NUnit.Framework.AssertionException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.InconclusiveException">
            <summary>
            Thrown when a test executes inconclusively.
            </summary>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="P:NUnit.Framework.InconclusiveException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuccessException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="P:NUnit.Framework.SuccessException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.GlobalSettings">
            <summary>
            GlobalSettings is a place for setting default _values used
            by the framework in performing asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.GlobalSettings.DefaultFloatingPointTolerance">
            <summary>
            Default tolerance for floating point equality
            </summary>
        </member>
        <member name="T:NUnit.Framework.Has">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ICombiningStrategy">
            <summary>
            CombiningStrategy is the abstract base for classes that
            know how to combine values provided for individual test
            parameters to create a set of test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ICombiningStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IWrapTestMethod">
            <summary>
            Objects implementing this interface are used to wrap
            the TestMethodCommand itself. They apply after SetUp
            has been run and before TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IDisposableFixture">
            <summary>
            Any ITest that implements this interface is at a level that the implementing
            class should be disposed at the end of the test run
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IMethodInfo">
            <summary>
            The IMethodInfo class is used to encapsulate information
            about a method in a platform-independent manner.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IReflectionInfo">
            <summary>
            The IReflectionInfo interface is implemented by NUnit wrapper objects that perform reflection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IReflectionInfo.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IReflectionInfo.IsDefined``1(System.Boolean)">
            <summary>
            Returns a value indicating whether an attribute of the specified type is defined on this object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.GetParameters">
            <summary>
            Gets the parameters of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.GetGenericArguments">
            <summary>
            Returns the Type arguments of a generic method or the Type parameters of a generic method definition.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.MakeGenericMethod(System.Type[])">
            <summary>
            Replaces the type parameters of the method with the array of types provided and returns a new IMethodInfo.
            </summary>
            <param name="typeArguments">The type arguments to be used</param>
            <returns>A new IMethodInfo with the type arguments replaced</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.TypeInfo">
            <summary>
            Gets the Type from which this method was reflected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsPublic">
            <summary>
            Gets a value indicating whether the method is public.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the method contains unassigned generic type parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the MethodInfo represents the definition of a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.ReturnType">
            <summary>
            Gets the return Type of the method.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterDataProvider">
            <summary>
            The IDataPointProvider interface is used by extensions
            that provide data for a single test parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">An IParameterInfo representing one
            argument to a parameterized test</param>
            <returns>True if any data is available, otherwise false.</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">An IParameterInfo representing one
            argument to a parameterized test</param>
            <returns>An IEnumerable providing the required data</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterInfo">
            <summary>
            The IParameterInfo interface is an abstraction of a .NET parameter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.Method">
            <summary>
            Gets an IMethodInfo representing the method for which this is a parameter
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.ParameterInfo">
            <summary>
            Gets the underlying .NET ParameterInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IPropertyBag">
            <summary>
            A PropertyBag represents a collection of name/value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but _values
            may be of any type. Null _values are not permitted, since
            a null entry represents the absence of the key.
            
            The entries in a PropertyBag are of two kinds: those that
            take a single value and those that take multiple _values.
            However, the PropertyBag has no knowledge of which entries
            fall into each category and the distinction is entirely
            up to the code using the PropertyBag.
            
            When working with multi-valued properties, client code
            should use the Add method to add name/value pairs and 
            indexing to retrieve a list of all _values for a given
            key. For example:
            
                bag.Add("Tag", "one");
                bag.Add("Tag", "two");
                Assert.That(bag["Tag"],
                  Is.EqualTo(new string[] { "one", "two" })); 
            
            When working with single-valued propeties, client code
            should use the Set method to set the value and Get to
            retrieve the value. The GetSetting methods may also be
            used to retrieve the value in a type-safe manner while
            also providing  default. For example:
            
                bag.Set("Priority", "low");
                bag.Set("Priority", "high"); // replaces value
                Assert.That(bag.Get("Priority"),
                  Is.EqualTo("high"));
                Assert.That(bag.GetSetting("Priority", "low"),
                  Is.EqualTo("high"));
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IXmlNodeBuilder">
            <summary>
            An object implementing IXmlNodeBuilder is able to build 
            an XML representation of itself and any children.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IXmlNodeBuilder.ToXml(System.Boolean)">
            <summary>
            Returns a TNode representing the current object.
            </summary>
            <param name="recursive">If true, children are included where applicable</param>
            <returns>A TNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IXmlNodeBuilder.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns a TNode representing the current object after 
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, children are included, where applicable</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property bag
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            _values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple _values are present and returning
            null if the value is not found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>True if their are _values present, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of _values for a particular key
            </summary>
            <param name="key">The key for which the _values are to be retrieved or set</param>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IPropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ISuiteBuilder">
            <summary>
            The ISuiteBuilder interface is exposed by a class that knows how to
            build a suite from one or more Types. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Examine the type and determine if it is suitable for
            this builder to use in building a TestSuite.
            
            Note that returning false will cause the type to be ignored 
            in loading the tests. If it is desired to load the suite
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="typeInfo">The type of the fixture to be used</param>
            <returns>True if the type can be used to build a TestSuite</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build a TestSuite from type provided.
            </summary>
            <param name="typeInfo">The type of the fixture to be used</param>
            <returns>A TestSuite</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITest">
            <summary>
            Common interface supported by all representations
            of a test. Only includes informational fields.
            The Run method is specifically excluded to allow
            for data-only representations of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Id">
            <summary>
            Gets the id of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Name">
            <summary>
            Gets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.FullName">
            <summary>
            Gets the fully qualified name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.ClassName">
            <summary>
            Gets the name of the class containing this test. Returns
            null if the test is not associated with a class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.MethodName">
            <summary>
            Gets the name of the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.TypeInfo">
            <summary>
            Gets the Type of the test fixture, if applicable, or
            null if no fixture type is associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Method">
            <summary>
            Gets an IMethod for the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.RunState">
            <summary>
            Gets the RunState of the test, indicating whether it can be run.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.TestCaseCount">
            <summary>
            Count of the test cases ( 1 if this is a test case )
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Properties">
            <summary>
            Gets the properties of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Parent">
            <summary>
            Gets the parent test, if any.
            </summary>
            <value>The parent test or null if none exists.</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.IsSuite">
            <summary>
            Returns true if this is a test suite
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Fixture">
            <summary>
            Gets a fixture object for running this test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestCaseBuilder">
            <summary>
            The ITestCaseBuilder interface is exposed by a class that knows how to
            build a test case from certain methods. 
            </summary>
            <remarks>
            This interface is not the same as the ITestCaseBuilder interface in NUnit 2.x.
            We have reused the name because the two products don't interoperate at all.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase to be
            included in the suite being populated.
            
            Note that returning false will cause the method to be ignored 
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
            <param name="method">The test method to examine</param>
            <param name="suite">The suite being populated</param>
            <returns>True is the builder can use this method</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a TestCase from the provided MethodInfo for
            inclusion in the suite being constructed.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <param name="suite">The test suite being populated, or null</param>
            <returns>A TestCase or null</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. Pass
            may examine the parents and/or descendants of a test, depending
            on the semantics of the particular filter
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter expicitly. That is, it must
            be a direct match of the test itself or one of it's children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicityly, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestListener">
            <summary>
            The ITestListener interface is used internally to receive 
            notifications of significant events while a test is being 
            run. The events are propagated to clients by means of an
            AsyncCallback. NUnit extensions may also monitor these events.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestResult">
            <summary>
            The ITestResult interface represents the result of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which 
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Duration">
            <summary>
            Gets the elapsed time for running the test in seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.StartTime">
            <summary>
            Gets or sets the time the test started running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.EndTime">
            <summary>
            Gets or sets the time the test finished running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure. Not available in
            the Compact Framework 1.0.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.AssertCount">
            <summary>
            Gets the number of asserts executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            Accessing HasChildren should not force creation of the
            Children collection in classes implementing this interface.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Children">
            <summary>
            Gets the the collection of child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Test">
            <summary>
            Gets the Test to which this result applies.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Output">
            <summary>
            Gets any text output written to this result.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITypeInfo">
            <summary>
            The ITypeInfo interface is an abstraction of a .NET Type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.IsType(System.Type)">
            <summary>
            Returns true if the Type wrapped is equal to the argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName">
            <summary>
            Get the display name for this typeInfo.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName(System.Object[])">
            <summary>
            Get the display name for an oject of this type, constructed with specific arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetGenericTypeDefinition">
            <summary>
            Returns a Type representing a generic type definition from which this Type can be constructed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.MakeGenericType(System.Type[])">
            <summary>
            Returns a new ITypeInfo representing an instance of this generic Type using the supplied Type arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.HasMethodWithAttribute(System.Type)">
            <summary>
            Returns a value indicating whether this type has a method with a specified public attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetMethods(NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Returns an array of IMethodInfos for methods of this Type
            that match the specified flags.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.HasConstructor(System.Type[])">
            <summary>
            Returns a value indicating whether this Type has a public constructor taking the specified argument Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.Construct(System.Object[])">
            <summary>
            Construct an object of this Type, using the specified arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Type">
            <summary>
            Gets the underlying Type on which this ITypeInfo is based
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.BaseType">
            <summary>
            Gets the base type of this type as an ITypeInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Name">
            <summary>
            Gets the Name of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.FullName">
            <summary>
            Gets the FullName of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Assembly">
            <summary>
            Gets the assembly in which the type is declared
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Namespace">
            <summary>
            Gets the Namespace of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the type is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsGenericType">
            <summary>
            Gets a value indicating whether the Type is a generic Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the Type has generic parameters that have not been replaced by specific Types.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether the Type is a generic Type definition
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsSealed">
            <summary>
            Gets a value indicating whether the type is sealed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsStaticClass">
            <summary>
            Gets a value indicating whether this type is a static class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ResultState">
            <summary>
            The ResultState class represents the outcome of running a test.
            It contains two pieces of information. The Status of the test
            is an enum indicating whether the test passed, failed, was
            skipped or was inconclusive. The Label provides a more
            detailed breakdown for use by client runners.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="site">The stage at which the result was produced</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,System.String,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="label">The label.</param>
            <param name="site">The stage at which the result was produced</param>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Inconclusive">
            <summary>
            The result is inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Skipped">
            <summary>
            The test has been skipped. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Ignored">
            <summary>
            The test has been ignored.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Explicit">
            <summary>
            The test was skipped because it is explicit
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Success">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Failure">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Error">
            <summary>
            The test encountered an unexpected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Cancelled">
            <summary>
            The test was cancelled by the user
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.NotRunnable">
            <summary>
            The test was not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.ChildFailure">
            <summary>
            A suite failed because one or more child tests failed or had errors
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.SetUpFailure">
            <summary>
            A suite failed in its OneTimeSetUp
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.SetUpError">
            <summary>
            A suite had an unexpected exception in its OneTimeSetUp
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.TearDownError">
            <summary>
            A suite had an unexpected exception in its OneTimeDown
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.WithSite(NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Get a new ResultState, which is the same as the current
            one but with the FailureSite set to the specified value.
            </summary>
            <param name="site">The FailureSite to use</param>
            <returns>A new ResultState</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Status">
            <summary>
            Gets the TestStatus for the test.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Label">
            <summary>
            Gets the label under which this test result is
            categorized, if any.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Site">
            <summary>
            Gets the stage of test execution in which
            the failure or other result took place.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occurred.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.RunState">
            <summary>
            The RunState enum indicates whether a test can be executed. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.NotRunnable">
            <summary>
            The test is not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Runnable">
            <summary>
            The test is runnable. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Explicit">
            <summary>
            The test can only be run explicitly
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Skipped">
            <summary>
            The test has been skipped. This value may
            appear on a Test when certain attributes
            are used to skip the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Ignored">
            <summary>
            The test has been ignored. May appear on
            a Test, when the IgnoreAttribute is used.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Skipped">
            <summary>
            The test has skipped 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TNode">
            <summary>
            TNode represents a single node in the XML representation
            of a Test or TestResult. It replaces System.Xml.XmlNode and
            System.Xml.Linq.XElement, providing a minimal set of methods 
            for operating on the XML in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String)">
            <summary>
            Constructs a new instance of TNode
            </summary>
            <param name="name">The name of the node</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of TNode with a value
            </summary>
            <param name="name">The name of the node</param>
            <param name="value">The text content of the node</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of TNode with a value
            </summary>
            <param name="name">The name of the node</param>
            <param name="value">The text content of the node</param>
            <param name="valueIsCDATA">Flag indicating whether to use CDATA when writing the text</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.FromXml(System.String)">
            <summary>
            Create a TNode from it's XML text representation
            </summary>
            <param name="xmlText">The XML text to be parsed</param>
            <returns>A TNode</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElement(System.String)">
            <summary>
            Adds a new element as a child of the current node and returns it.
            </summary>
            <param name="name">The element name.</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElement(System.String,System.String)">
            <summary>
            Adds a new element with a value as a child of the current node and returns it.
            </summary>
            <param name="name">The element name</param>
            <param name="value">The text content of the new element</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElementWithCDATA(System.String,System.String)">
            <summary>
            Adds a new element with a value as a child of the current node and returns it.
            The value will be output using a CDATA section.
            </summary>
            <param name="name">The element name</param>
            <param name="value">The text content of the new element</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute with a specified name and value to the XmlNode.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.SelectSingleNode(System.String)">
            <summary>
            Finds a single descendant of this node matching an xpath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.SelectNodes(System.String)">
            <summary>
            Finds all descendants of this node matching an xpath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the node to an XmlWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Name">
            <summary>
            Gets the name of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Value">
            <summary>
            Gets the value of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.ValueIsCDATA">
            <summary>
            Gets a flag indicating whether the value should be output using CDATA.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Attributes">
            <summary>
            Gets the dictionary of attributes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.ChildNodes">
            <summary>
            Gets a list of child nodes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.FirstChild">
            <summary>
            Gets the first ChildNode
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.OuterXml">
            <summary>
            Gets the XML representation of this node.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.NodeList">
            <summary>
            Class used to represent a list of XmlResults
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.AttributeDictionary">
            <summary>
            Class used to represent the attributes of a node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.AttributeDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            Overridden to return null if attribute is not found.
            </summary>
            <param name="key">The key.</param>
            <returns>Value of the attribute or null</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.AsyncInvocationRegion.WaitForPendingOperationsToComplete(System.Object)">
            <summary>
            Waits for pending asynchronous operations to complete, if appropriate,
            and returns a proper result of the invocation by unwrapping task results
            </summary>
            <param name="invocationResult">The raw result of the method invocation</param>
            <returns>The unwrapped result, if necessary</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.CombinatorialStrategy">
            <summary>
            CombinatorialStrategy creates test cases by using all possible
            combinations of the parameter data.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.CombinatorialStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DatapointProvider">
            <summary>
            Provides data from fields marked with the DatapointAttribute or the
            DatapointsAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DatapointProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            True if any data is available, otherwise false.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DatapointProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            An IEnumerable providing the required data
            </returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder">
            <summary>
            Built-in SuiteBuilder for all types of test classes.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Checks to see if the provided Type is a fixture.
            To be considered a fixture, it must be a non-abstract
            class with one or more attributes implementing the
            IFixtureBuilder interface or one or more methods
            marked as tests.
            </summary>
            <param name="typeInfo">The fixture type to check</param>
            <returns>True if the fixture can be built, false if not</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build a TestSuite from TypeInfo provided.
            </summary>
            <param name="typeInfo">The fixture type to build</param>
            <returns>A TestSuite built from that type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.GetFixtureBuilderAttributes(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            We look for attributes implementing IFixtureBuilder at one level 
            of inheritance at a time. Attributes on base classes are not used 
            unless there are no fixture builder attributes at all on the derived
            class. This is by design.
            </summary>
            <param name="typeInfo">The type being examined for attributes</param>
            <returns>A list of the attributes found.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder">
            <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
              1. The method needs no params and none are provided
              2. The method needs params and they are provided
              3. The method needs no params but they are provided in error
              4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attribute for this to be true.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">An IMethodInfo for the method being used as a test method</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The method for which a test is to be built</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attribute for this to be true.
            
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
            <param name="method">An IMethodInfo for the method being used as a test method</param>
            <param name="parentSuite">The test suite being built, to which the new test would be added</param>
            <returns>True if the builder can create a test case from this method</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
            <param name="method">The method for which a test is to be built</param>
            <param name="parentSuite">The test fixture being populated, or null</param>
            <returns>A Test representing one or more method invocations</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildParameterizedMethodSuite(NUnit.Framework.Interfaces.IMethodInfo,System.Collections.Generic.IEnumerable{NUnit.Framework.Internal.TestMethod})">
            <summary>
            Builds a ParameterizedMethodSuite containing individual test cases.
            </summary>
            <param name="method">The method for which a test is to be built.</param>
            <param name="tests">The list of test cases to include.</param>
            <returns>A ParameterizedMethodSuite populated with test cases</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildSingleTestMethod(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a simple, non-parameterized TestMethod for this method.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="suite">The test suite for which the method is being built</param>
            <returns>A TestMethod.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder">
            <summary>
            Class that can build a tree of automatic namespace
            suites from a group of fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.namespaceSuites">
            <summary>
            NamespaceDictionary of all test suites we have created to represent 
            namespaces. Used to locate namespace parent suites for fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.rootSuite">
            <summary>
            The root of the test suite being created by this builder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder"/> class.
            </summary>
            <param name="rootSuite">The root suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(System.Collections.Generic.IList{NUnit.Framework.Internal.Test})">
            <summary>
            Adds the specified fixtures to the tree.
            </summary>
            <param name="fixtures">The fixtures to be added.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Adds the specified fixture to the tree.
            </summary>
            <param name="fixture">The fixture to be added.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.RootSuite">
            <summary>
            Gets the root entry in the tree created by the NamespaceTreeBuilder.
            </summary>
            <value>The root suite.</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder">
            <summary>
            NUnitTestCaseBuilder is a utility class used by attributes
            that build test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.#ctor">
            <summary>
            Constructs an <see cref="T:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.BuildTestMethod(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test,NUnit.Framework.Internal.TestCaseParameters)">
            <summary>
            Builds a single NUnitTestMethod, either as a child of the fixture
            or as one of a set of test cases under a ParameterizedTestMethodSuite.
            </summary>
            <param name="method">The MethodInfo from which to construct the TestMethod</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
            <param name="parms">The ParameterSet to be used, or null</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Internal.TestCaseParameters)">
             <summary>
             Helper method that checks the signature of a TestMethod and
             any supplied parameters to determine if the test is valid.
            
             Currently, NUnitTestMethods are required to be public,
             non-abstract methods, either static or instance,
             returning void. They may take arguments but the _values must
             be provided or the TestMethod is not considered runnable.
            
             Methods not meeting these criteria will be marked as
             non-runnable and the method will return false in that case.
             </summary>
             <param name="testMethod">The TestMethod to be checked. If it
             is found to be non-runnable, it will be modified.</param>
             <param name="parms">Parameters to be used for this test, or null</param>
             <returns>True if the method signature is valid, false if not</returns>
             <remarks>
             The return value is no longer used internally, but is retained
             for testing purposes.
             </remarks>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder">
            <summary>
            NUnitTestFixtureBuilder is able to build a fixture given
            a class marked with a TestFixtureAttribute or an unmarked
            class containing test methods. In the first case, it is
            called by the attribute and in the second directly by
            NUnitSuiteBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Build a TestFixture from type provided. A non-null TestSuite
            must always be returned, since the method is generally called
            because the user has marked the target class as a fixture.
            If something prevents the fixture from being used, it should
            be returned nonetheless, labelled as non-runnable.
            </summary>
            <param name="typeInfo">An ITypeInfo for the fixture to be used.</param>
            <returns>A TestSuite object or one derived from TestSuite.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.ITestFixtureData)">
            <summary>
            Overload of BuildFrom called by tests that have arguments.
            Builds a fixture using the provided type and information 
            in the ITestFixtureData object.
            </summary>
            <param name="typeInfo">The TypeInfo for which to construct a fixture.</param>
            <param name="testFixtureData">An object implementing ITestFixtureData or null.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.AddTestCasesToFixture(NUnit.Framework.Internal.TestFixture)">
            <summary>
            Method to add test cases to the newly constructed fixture.
            </summary>
            <param name="fixture">The fixture to which cases should be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildTestCase(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.TestSuite)">
            <summary>
            Method to create a test case from a MethodInfo and add
            it to the fixture being built. It first checks to see if
            any global TestCaseBuilder addin wants to build the
            test case. If not, it uses the internal builder
            collection maintained by this fixture builder.
            
            The default implementation has no test case builders.
            Derived classes should add builders to the collection
            in their constructor.
            </summary>
            <param name="method">The method for which a test is to be created</param>
            <param name="suite">The test suite being built.</param>
            <returns>A newly constructed Test</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy">
            <summary>
            PairwiseStrategy creates test cases by combining the parameter
            data so that all possible pairs of data items are used.
            </summary>
            <remarks>
            <para>
            The number of test cases that cover all possible pairs of test function
            parameters values is significantly less than the number of test cases
            that cover all possible combination of test function parameters values.
            And because different studies show that most of software failures are
            caused by combination of no more than two parameters, pairwise testing
            can be an effective ways to test the system when it's impossible to test
            all combinations of parameters.
            </para>
            <para>
            The PairwiseStrategy code is based on "jenny" tool by Bob Jenkins:
            http://burtleburtle.net/bob/math/jenny.html
            </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by this strategy instance.
            </summary>
            <returns>A set of test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FleaRand">
            <summary>
            FleaRand is a pseudo-random number generator developed by Bob Jenkins:
            http://burtleburtle.net/bob/rand/talksmall.html#flea
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FleaRand.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the FleaRand class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo">
            <summary>
            FeatureInfo represents coverage of a single value of test function
            parameter, represented as a pair of indices, Dimension and Feature. In
            terms of unit testing, Dimension is the index of the test parameter and
            Feature is the index of the supplied value in that parameter's list of
            sources.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of FeatureInfo class.
            </summary>
            <param name="dimension">Index of a dimension.</param>
            <param name="feature">Index of a feature.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple">
            <summary>
            A FeatureTuple represents a combination of features, one per test
            parameter, which should be covered by a test case. In the
            PairwiseStrategy, we are only trying to cover pairs of features, so the
            tuples actually may contain only single feature or pair of features, but
            the algorithm itself works with triplets, quadruples and so on.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple.#ctor(NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo)">
            <summary>
            Initializes a new instance of FeatureTuple class for a single feature.
            </summary>
            <param name="feature1">Single feature.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple.#ctor(NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo,NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo)">
            <summary>
            Initializes a new instance of FeatureTuple class for a pair of features.
            </summary>
            <param name="feature1">First feature.</param>
            <param name="feature2">Second feature.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.TestCaseInfo">
            <summary>
            TestCase represents a single test case covering a list of features.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.TestCaseInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of TestCaseInfo class.
            </summary>
            <param name="length">A number of features in the test case.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator">
            <summary>
            PairwiseTestCaseGenerator class implements an algorithm which generates
            a set of test cases which covers all pairs of possible values of test
            function.
            </summary>
            <remarks>
            <para>
            The algorithm starts with creating a set of all feature tuples which we
            will try to cover (see <see cref="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator.CreateAllTuples"/> method). This set
            includes every single feature and all possible pairs of features. We
            store feature tuples in the 3-D collection (where axes are "dimension",
            "feature", and "all combinations which includes this feature"), and for
            every two feature (e.g. "A" and "B") we generate both ("A", "B") and
            ("B", "A") pairs. This data structure extremely reduces the amount of
            time needed to calculate coverage for a single test case (this
            calculation is the most time-consuming part of the algorithm).
            </para>
            <para>
            Then the algorithm picks one tuple from the uncovered tuple, creates a
            test case that covers this tuple, and then removes this tuple and all
            other tuples covered by this test case from the collection of uncovered
            tuples.
            </para>
            <para>
            Picking a tuple to cover
            </para>
            <para>
            There are no any special rules defined for picking tuples to cover. We
            just pick them one by one, in the order they were generated.
            </para>
            <para>
            Test generation
            </para>
            <para>
            Test generation starts from creating a completely random test case which
            covers, nevertheless, previously selected tuple. Then the algorithm
            tries to maximize number of tuples which this test covers.
            </para>
            <para>
            Test generation and maximization process repeats seven times for every
            selected tuple and then the algorithm picks the best test case ("seven"
            is a magic number which provides good results in acceptable time).
            </para>
            <para>Maximizing test coverage</para>
            <para>
            To maximize tests coverage, the algorithm walks thru the list of mutable
            dimensions (mutable dimension is a dimension that are not included in
            the previously selected tuple). Then for every dimension, the algorithm
            walks thru the list of features and checks if this feature provides
            better coverage than randomly selected feature, and if yes keeps this
            feature.
            </para>
            <para>
            This process repeats while it shows progress. If the last iteration
            doesn't improve coverage, the process ends.
            </para>
            <para>
            In addition, for better results, before start every iteration, the
            algorithm "scrambles" dimensions - so for every iteration dimension
            probes in a different order.
            </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator.GetTestCases(System.Int32[])">
            <summary>
            Creates a set of test cases for specified dimensions.
            </summary>
            <param name="dimensions">
            An array which contains information about dimensions. Each element of
            this array represents a number of features in the specific dimension.
            </param>
            <returns>
            A set of test cases.
            </returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.ParameterDataProvider">
            <summary>
            ParameterDataProvider supplies individual argument _values for
            single parameters using attributes derived from DataAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determine whether any data is available for a parameter.
            </summary>
            <param name="parameter">A ParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            True if any data is available, otherwise false.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Return an IEnumerable providing data for use with the
            supplied parameter.
            </summary>
            <param name="parameter">An IParameterInfo representing one
            argument to a parameterized test</param>
            <returns>
            An IEnumerable providing the required data
            </returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.SequentialStrategy">
            <summary>
            SequentialStrategy creates test cases by using all of the
            parameter data sources in parallel, substituting <c>null</c>
            when any of them run out of data.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.SequentialStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand">
            <summary>
            ContextSettingsCommand applies specified changes to the
            TestExecutionContext prior to running a test. No special
            action is needed after the test runs, since the prior
            context will be restored automatically.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.CommandStage">
            <summary>
            The CommandStage enumeration represents the defined stages
            of execution for a series of TestCommands. The int _values
            of the enum are used to apply decorators in the proper 
            order. Lower _values are applied first and are therefore
            "closer" to the actual test execution.
            </summary>
            <remarks>
            No CommandStage is defined for actual invocation of the test or
            for creation of the context. Execution may be imagined as 
            proceeding from the bottom of the list upwards, with cleanup
            after the test running in the opposite order.
            </remarks>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.Default">
            <summary>
            Use an application-defined default value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.BelowSetUpTearDown">
            <summary>
            Make adjustments needed before and after running
            the raw test - that is, after any SetUp has run
            and before TearDown.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.SetUpTearDown">
            <summary>
            Run SetUp and TearDown for the test.  This stage is used
            internally by NUnit and should not normally appear
            in user-defined decorators.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.CommandStage.AboveSetUpTearDown">
            <summary>
            Make adjustments needed before and after running 
            the entire test - including SetUp and TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.MaxTimeCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.MaxTimeCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.MaxTimeCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="maxTime">The max time allowed in milliseconds</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.MaxTimeCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.OneTimeSetUpCommand">
            <summary>
            OneTimeSetUpCommand runs any one-time setup methods for a suite,
            constructing the user test object if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeSetUpCommand.#ctor(NUnit.Framework.Internal.TestSuite,System.Collections.Generic.List{NUnit.Framework.Internal.Commands.SetUpTearDownItem},System.Collections.Generic.List{NUnit.Framework.Internal.Commands.TestActionItem})">
            <summary>
            Constructs a OneTimeSetUpCommand for a suite
            </summary>
            <param name="suite">The suite to which the command applies</param>
            <param name="setUpTearDown">A SetUpTearDownList for use by the command</param>
            <param name="actions">A List of TestActionItems to be run after Setup</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeSetUpCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to run the one-time setup for a suite.
            </summary>
            <param name="context">The TestExecutionContext to be used.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.OneTimeTearDownCommand">
            <summary>
            OneTimeTearDownCommand performs any teardown actions
            specified for a suite and calls Dispose on the user
            test object, if any.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeTearDownCommand.#ctor(NUnit.Framework.Internal.TestSuite,System.Collections.Generic.List{NUnit.Framework.Internal.Commands.SetUpTearDownItem},System.Collections.Generic.List{NUnit.Framework.Internal.Commands.TestActionItem})">
            <summary>
            Construct a OneTimeTearDownCommand
            </summary>
            <param name="suite">The test suite to which the command applies</param>
            <param name="setUpTearDownItems">A SetUpTearDownList for use by the command</param>
            <param name="actions">A List of TestActionItems to be run before teardown.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeTearDownCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to run the teardown methods specified on the test.
            </summary>
            <param name="context">The TestExecutionContext to be used.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand">
            <summary>
            SetUpTearDownCommand runs any SetUp methods for a suite,
            runs the test and then runs any TearDown methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownItem">
            <summary>
            SetUpTearDownItem holds the setup and teardown methods
            for a single level of the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.#ctor(System.Collections.Generic.IList{System.Reflection.MethodInfo},System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Construct a SetUpTearDownNode
            </summary>
            <param name="setUpMethods">A list of setup methods for this level</param>
            <param name="tearDownMethods">A list teardown methods for this level</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunSetUp(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Run SetUp on this level.
            </summary>
            <param name="context">The execution context to use for running.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunTearDown(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Run TearDown for this level.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.SetUpTearDownItem.HasMethods">
            <summary>
             Returns true if this level has any methods at all.
             This flag is used to discard levels that do nothing.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SkipCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SkipCommand"/> class.
            </summary>
            <param name="test">The test being skipped.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to simply set the CurrentResult to the
            appropriate Skipped state.
            </summary>
            <param name="context">The execution context for the test</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestActionCommand">
            <summary>
            TestActionCommand runs the BeforeTest actions for a test,
            then runs the test and finally runs the AfterTestActions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestActionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestActionItem">
            <summary>
            TestActionItem represents a single execution of an
            ITestAction. It is used to track whether the BeforeTest
            method has been called and suppress calling the
            AfterTest method if it has not.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.#ctor(NUnit.Framework.ITestAction)">
            <summary>
            Construct a TestActionItem
            </summary>
            <param name="action">The ITestAction to be included</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Run the BeforeTest method of the action and remember that it has been run.
            </summary>
            <param name="test">The test to which the action applies</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Run the AfterTest action, but only if the BeforeTest
            action was actually run.
            </summary>
            <param name="test">The test to which the action applies</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestMethodCommand">
            <summary>
            TestMethodCommand is the lowest level concrete command
            used to run actual test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.#ctor(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestMethodCommand"/> class.
            </summary>
            <param name="testMethod">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the execution context, as
            well as returning it. If the test has an expected result, it
            is asserts on that value. Since failed tests and errors throw
            an exception, this command must be wrapped in an outer command,
            will handle that exception and records the failure. This role
            is usually played by the SetUpTearDown command.
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TheoryResultCommand">
            <summary>
            TheoryResultCommand adjusts the result of a Theory so that
            it fails if all the results were inconclusive.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TheoryResultCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Constructs a TheoryResultCommand 
            </summary>
            <param name="command">The command to be wrapped by this one</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TheoryResultCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to call the inner command and adjust the result
            in case all chlid results were inconclusive.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.CultureDetector">
            <summary>
            CultureDetector is a helper class used by NUnit to determine
            whether a test should be run based on the current culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor">
            <summary>
            Default constructor uses the current culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor(System.String)">
            <summary>
            Construct a CultureDetector for a particular culture for testing.
            </summary>
            <param name="culture">The culture to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of cultures
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(NUnit.Framework.CultureAttribute)">
            <summary>
            Tests to determine if the current culture is supported
            based on a culture attribute.
            </summary>
            <param name="cultureAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture ids</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.CultureDetector.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ExceptionHelper">
            <summary>
            ExceptionHelper provides static methods for working with exceptions
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildMessage(System.Exception)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A combined message string.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildStackTrace(System.Exception)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A combined stack trace.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.GetStackTrace(System.Exception)">
            <summary>
            Gets the stack trace of the exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A string representation of the stack trace.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.CommandBuilder">
            <summary>
            A utility class to create TestCommands
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CommandBuilder.MakeOneTimeSetUpCommand(NUnit.Framework.Internal.TestSuite,System.Collections.Generic.List{NUnit.Framework.Internal.Commands.SetUpTearDownItem},System.Collections.Generic.List{NUnit.Framework.Internal.Commands.TestActionItem})">
            <summary>
            Gets the command to be executed before any of
            the child tests are run.
            </summary>
            <returns>A TestCommand</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CommandBuilder.MakeOneTimeTearDownCommand(NUnit.Framework.Internal.TestSuite,System.Collections.Generic.List{NUnit.Framework.Internal.Commands.SetUpTearDownItem},System.Collections.Generic.List{NUnit.Framework.Internal.Commands.TestActionItem})">
            <summary>
            Gets the command to be executed after all of the
            child tests are run.
            </summary>
            <returns>A TestCommand</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CommandBuilder.MakeTestCommand(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Creates a test command for use in running this test.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CommandBuilder.MakeSkipCommand(NUnit.Framework.Internal.Test)">
            <summary>
            Creates a command for skipping a test. The result returned will
            depend on the test RunState.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CommandBuilder.BuildSetUpTearDownList(System.Type,System.Type,System.Type)">
            <summary>
            Builds the set up tear down list.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="setUpType">Type of the set up attribute.</param>
            <param name="tearDownType">Type of the tear down attribute.</param>
            <returns>A list of SetUpTearDownItems</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.CompositeWorkItem">
            <summary>
            A CompositeWorkItem represents a test suite and
            encapsulates the execution of the suite as well
            as all its child tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItem">
            <summary>
            A WorkItem may be an individual test case, a fixture or
            a higher level grouping of tests. All WorkItems inherit
            from the abstract WorkItem class, which uses the template
            pattern to allow derived classes to perform work in
            whatever way is needed.
            
            A WorkItem is created with a particular TestExecutionContext
            and is responsible for re-establishing that context in the
            current thread before it begins or resumes execution.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.CreateWorkItem(NUnit.Framework.Interfaces.ITest,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a work item.
            </summary>
            <param name="test">The test for which this WorkItem is being created.</param>
            <param name="filter">The filter to be used in selecting any child Tests.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a WorkItem for a particular test.
            </summary>
            <param name="test">The test that the WorkItem will run</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.InitializeContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Initialize the TestExecutionContext. This must be done
            before executing the WorkItem.
            </summary>
            <remarks>
            Originally, the context was provided in the constructor
            but delaying initialization of the context until the item
            is about to be dispatched allows changes in the parent
            context during OneTimeSetUp to be reflected in the child.
            </remarks>
            <param name="context">The TestExecutionContext to use</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.Execute">
            <summary>
            Execute the current work item, including any
            child work items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work. It should
            set the State to WorkItemState.Complete when done.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.WorkItemComplete">
            <summary>
            Method called by the derived class when all work is complete
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.WorkItem.Completed">
            <summary>
            Event triggered when the item is complete
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.State">
            <summary>
            Gets the current state of the WorkItem
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Test">
            <summary>
            The test being executed by the work item
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Context">
            <summary>
            The execution context
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Actions">
            <summary>
            The test actions to be performed before and after this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Result">
            <summary>
            The test result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.#ctor(NUnit.Framework.Internal.TestSuite,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Construct a CompositeWorkItem for executing a test suite
            using a filter to select child tests.
            </summary>
            <param name="suite">The TestSuite to be executed</param>
            <param name="childFilter">A filter used to select child tests</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork">
            <summary>
            Method that actually performs the work. Overridden
            in CompositeWorkItem to do setup, run all child
            items and then do teardown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.CountdownEvent">
            <summary>
            A simplified implementation of .NET 4 CountdownEvent
            for use in earlier versions of .NET. Only the methods
            used by NUnit are implemented.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CountdownEvent.#ctor(System.Int32)">
            <summary>
            Construct a CountdownEvent
            </summary>
            <param name="initialCount">The initial count</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CountdownEvent.Signal">
            <summary>
            Decrement the count by one
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CountdownEvent.Wait">
            <summary>
            Block the thread until the count reaches zero
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CountdownEvent.InitialCount">
            <summary>
            Gets the initial count established for the CountdownEvent
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CountdownEvent.CurrentCount">
            <summary>
            Gets the current count remaining for the CountdownEvent
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.IWorkItemDispatcher">
            <summary>
            An IWorkItemDispatcher handles execution of work items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution. The first
            work item dispatched is saved as the top-level
            work item and used when stopping the run.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.CancelRun">
            <summary>
            Cancel the ongoing run completely.
            If no run is in process, the call has no effect.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.SimpleWorkItem">
            <summary>
            A SimpleWorkItem represents a single test case and is
            marked as completed immediately upon execution. This
            class is also used for skipped or ignored test suites.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.#ctor(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Construct a simple work item for a test.
            </summary>
            <param name="test">The test to be executed</param>
            <param name="filter">The filter used to select this test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher">
            <summary>
            SimpleWorkItemDispatcher handles execution of WorkItems by
            directly executing them. It is provided so that a dispatcher
            is always available in the context, thereby simplifying the
            code needed to run child tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution. The first
            work item dispatched is saved as the top-level
            work item and a thread is created on which to
            run it. Subsequent calls come from the top level
            item or its descendants on the proper thread.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.CancelRun">
            <summary>
            Cancel the ongoing run completely.
            If no run is in process, the call has no effect.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a given 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="result">The result of the constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given _values. This
            method may be called by constraints that need more control over
            the display of actual and expected _values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given _values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string _values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
            <param name="clipping">If true, clip the strings to fit the max line length</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="result">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="result">The ConstraintResult for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TextMessageWriter.MaxLineLength">
            <summary>
            Gets or sets the maximum line length for this writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItemState">
            <summary>
            The current state of a work item
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Ready">
            <summary>
            Ready to run or continue
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Running">
            <summary>
            Work Item is executing
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.AndFilter">
            <summary>
            Combines multiple filters so that a test must pass all 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CompositeFilter">
            <summary>
            A base class for multi-part filters
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestFilter.Empty">
            <summary>
            Unique Empty filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. The default 
            implementation checks the test itself, its parents and any descendants.
            
            Derived classes may override this method or any of the Match methods
            to change the behavior of the filter.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter expicitly. That is, it must
            be a direct match of the test itself or one of it's children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicityly, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether the test itself matches the filter criteria, without
            examining either parents or descendants. This is overridden by each
            different type of filter to perform the necessary tests.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the any parent of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchParent(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether any ancestor of the test matches the filter criteria
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the an ancestor of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchDescendant(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.FromXml(System.String)">
            <summary>
            Create a TestFilter instance from an xml representation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.FromXml(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Create a TestFilter from it's TNode representation
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.ToXml(System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFilter.IsEmpty">
            <summary>
            Indicates whether this is the EmptyFilter
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFilter.TopLevel">
            <summary>
            Indicates whether this is a top-level filter,
            not contained in any other filter.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter.EmptyFilter">
            <summary>
            Nested class provides an empty filter - one that always
            returns true when called. It never matches explicitly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.#ctor">
            <summary>
            Constructs an empty CompositeFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.#ctor(NUnit.Framework.Interfaces.ITestFilter[])">
            <summary>
            Constructs a CompositeFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.Add(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Adds a filter to the list of filters
            </summary>
            <param name="filter">The filter to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CompositeFilter.Filters">
            <summary>
            Return a list of the composing filters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CompositeFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor">
            <summary>
            Constructs an empty AndFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor(NUnit.Framework.Interfaces.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.AndFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CategoryFilter">
            <summary>
            CategoryFilter is able to select or exclude tests
            based on their categories.
            </summary>
            
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.ValueMatchFilter">
            <summary>
            ValueMatchFilter selects tests based on some value, which
            is expected to be contained in the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.#ctor(System.String)">
            <summary>
            Construct a ValueMatchFilter for a single value.
            </summary>
            <param name="expectedValue">The value to be included.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.Match(System.String)">
            <summary>
            Match the input provided by the derived class
            </summary>
            <param name="input">The value to be matchedT</param>
            <returns>True for a match, false otherwise.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.ExpectedValue">
            <summary>
            Returns the value matched by the filter - used for testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.IsRegex">
            <summary>
            Indicates whether the value is a regular expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.#ctor(System.String)">
            <summary>
            Construct a CategoryFilter using a single category name
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CategoryFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.ClassNameFilter">
            <summary>
            ClassName filter selects tests based on the class FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ClassNameFilter.#ctor(System.String)">
            <summary>
            Construct a FullNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ClassNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ClassNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.FullNameFilter">
            <summary>
            FullName filter selects tests based on their FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.FullNameFilter.#ctor(System.String)">
            <summary>
            Construct a FullNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.FullNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.FullNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.IdFilter">
            <summary>
            IdFilter selects tests based on their id
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.IdFilter.#ctor(System.String)">
            <summary>
            Construct an IdFilter for a single value
            </summary>
            <param name="id">The id the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.IdFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.IdFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.MethodNameFilter">
            <summary>
            FullName filter selects tests based on their FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.MethodNameFilter.#ctor(System.String)">
            <summary>
            Construct a MethodNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.MethodNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.MethodNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.NotFilter">
            <summary>
            NotFilter negates the operation of another filter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.#ctor(NUnit.Framework.Internal.TestFilter)">
            <summary>
            Construct a not filter on another filter
            </summary>
            <param name="baseFilter">The filter to be negated</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. The default 
            implementation checks the test itself, its parents and any descendants.
            
            Derived classes may override this method or any of the Match methods
            to change the behavior of the filter.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter expicitly. That is, it must
            be a direct match of the test itself or one of it's children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicityly, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.NotFilter.BaseFilter">
            <summary>
            Gets the base filter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.OrFilter">
            <summary>
            Combines multiple filters so that a test must pass one 
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor">
            <summary>
            Constructs an empty OrFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor(NUnit.Framework.Interfaces.ITestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.OrFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.PropertyFilter">
            <summary>
            PropertyFilter is able to select or exclude tests
            based on their properties.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyFilter using a property name and expected value
            </summary>
            <param name="propertyName">A property name</param>
            <param name="expectedValue">The expected value of the property</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.PropertyFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.TestNameFilter">
            <summary>
            TestName filter selects tests based on their Name
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.TestNameFilter.#ctor(System.String)">
            <summary>
            Construct a TestNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.TestNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.TestNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.GenericMethodHelper">
            <summary>
            GenericMethodHelper is able to deduce the Type arguments for
            a generic method from the actual arguments provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.GenericMethodHelper.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Construct a GenericMethodHelper for a method
            </summary>
            <param name="method">MethodInfo for the method to examine</param>
        </member>
        <member name="M:NUnit.Framework.Internal.GenericMethodHelper.GetTypeArguments(System.Object[])">
            <summary>
            Return the type argments for the method, deducing them
            from the arguments actually provided.
            </summary>
            <param name="argList">The arguments to the method</param>
            <returns>An array of type arguments.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidDataSourceException">
            <summary>
            InvalidTestFixtureException is thrown when an appropriate test
            fixture constructor using the provided arguments cannot be found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidTestFixtureException">
            <summary>
            InvalidTestFixtureException is thrown when an appropriate test
            fixture constructor using the provided arguments cannot be found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.MethodWrapper">
            <summary>
            The MethodWrapper class wraps a MethodInfo so that it may
            be used in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Construct a MethodWrapper for a Type and a MethodInfo.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.#ctor(System.Type,System.String)">
            <summary>
            Construct a MethodInfo for a given Type and method name.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetParameters">
            <summary>
            Gets the parameters of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetGenericArguments">
            <summary>
            Returns the Type arguments of a generic method or the Type parameters of a generic method definition.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.MakeGenericMethod(System.Type[])">
            <summary>
            Replaces the type parameters of the method with the array of types provided and returns a new IMethodInfo.
            </summary>
            <param name="typeArguments">The type arguments to be used</param>
            <returns>A new IMethodInfo with the type arguments replaced</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Gets a value indicating whether one or more attributes of the spcified type are defined on the method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.ToString">
            <summary>
            Override ToString() so that error messages in NUnit's own tests make sense
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.TypeInfo">
            <summary>
            Gets the Type from which this method was reflected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsPublic">
            <summary>
            Gets a value indicating whether the method is public.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the method contains unassigned generic type parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the MethodInfo represents the definition of a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.ReturnType">
            <summary>
            Gets the return Type of the method.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.NUnitException">
            <summary>
            Thrown when an assertion failed. Here to preserve the inner
            exception and hence its stack trace.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterWrapper">
            <summary>
            The ParameterWrapper class wraps a ParameterInfo so that it may
            be used in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.#ctor(NUnit.Framework.Interfaces.IMethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            Construct a ParameterWrapper for a given method and parameter
            </summary>
            <param name="method"></param>
            <param name="parameterInfo"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Gets a value indicating whether one or more attributes of the specified type are defined on the parameter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.Method">
            <summary>
            Gets an IMethodInfo representing the method for which this is a parameter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.ParameterInfo">
            <summary>
            Gets the underlying ParameterInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyBag">
            <summary>
            A PropertyBag represents a collection of name value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but _values
            may be of any type. Null _values are not permitted, since
            a null entry represents the absence of the key.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property set
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            _values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple _values are present and returning
            null if the value is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>
            True if their are _values present, otherwise false
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ToXml(System.Boolean)">
            <summary>
            Returns an XmlNode representating the current PropertyBag.
            </summary>
            <param name="recursive">Not used</param>
            <returns>An XmlNode representing the PropertyBag</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the PropertyBag after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">Not used</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of _values for a particular key
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyNames">
            <summary>
            The PropertyNames class provides static constants for the
            standard property ids that NUnit uses on tests.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.AppDomain">
            <summary>
            The FriendlyName of the AppDomain in which the assembly is running
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.JoinType">
            <summary>
            The selected strategy for joining parameter data into test cases
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProcessID">
            <summary>
            The process ID of the executing assembly
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProviderStackTrace">
            <summary>
            The stack trace from any data provider that threw
            an exception.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SkipReason">
            <summary>
            The reason a test was not run
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Author">
            <summary>
            The author of the tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ApartmentState">
            <summary>
            The ApartmentState required for running the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Category">
            <summary>
            The categories applying to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Description">
            <summary>
            The Description of a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.LevelOfParallelism">
            <summary>
            The number of threads to be used in running tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.MaxTime">
            <summary>
            The maximum time in ms, above which the test is considered to have failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ParallelScope">
            <summary>
            The ParallelScope associated with a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.RepeatCount">
            <summary>
            The number of times the test should be repeated
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.RequiresThread">
            <summary>
            Indicates that the test should be run on a separate thread
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetCulture">
            <summary>
            The culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetUICulture">
            <summary>
            The UI culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.TestOf">
            <summary>
            The type that is under test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Timeout">
            <summary>
            The timeout value for the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.IgnoreUntilDate">
            <summary>
            The test will be ignored until the given date
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Randomizer">
            <summary>
            Randomizer returns a set of random _values in a repeatable
            way, to allow re-running of tests if necessary. It extends
            the .NET Random class, providing random values for a much
            wider range of types.
            
            The class is used internally by the framework to generate 
            test case data and is also exposed for use by users through 
            the TestContext.Random property.
            </summary>
            <remarks>
            For consistency with the underlying Random Type, methods 
            returning a single value use the prefix "Next..." Those
            without an argument return a non-negative value up to
            the full positive range of the Type. Overloads are provided
            for specifying a maximum or a range. Methods that return
            arrays or strings use the prefix "Get..." to avoid 
            confusion with the single-value methods.
            </remarks>
        </member>
        <member name="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">
            <summary>
            Default characters for random functions.
            </summary>
            <remarks>Default characters are the English alphabet (uppercase &amp; lowercase), arabic numerals, and underscore</remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.MemberInfo)">
            <summary>
            Get a Randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same _values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.ParameterInfo)">
            <summary>
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.CreateRandomizer">
            <summary>
            Create a new Randomizer using the next seed
            available to ensure that each randomizer gives
            a unique sequence of values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor(System.Int32)">
            <summary>
            Construct based on seed value
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt">
            <summary>
            Returns a random unsigned int.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt(System.UInt32)">
            <summary>
            Returns a random unsigned int less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns a random unsigned int within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort">
            <summary>
            Returns a non-negative random short.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort(System.Int16)">
            <summary>
            Returns a non-negative random short less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort(System.Int16,System.Int16)">
            <summary>
            Returns a non-negative random short within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort">
            <summary>
            Returns a random unsigned short.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort(System.UInt16)">
            <summary>
            Returns a random unsigned short less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort(System.UInt16,System.UInt16)">
            <summary>
            Returns a random unsigned short within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong">
            <summary>
            Returns a random long.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong(System.Int64)">
            <summary>
            Returns a random long less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns a non-negative random long within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong">
            <summary>
            Returns a random ulong.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong(System.UInt64)">
            <summary>
            Returns a random ulong less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns a non-negative random long within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte">
            <summary>
            Returns a random Byte
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte(System.Byte)">
            <summary>
            Returns a random Byte less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte(System.Byte,System.Byte)">
            <summary>
            Returns a random Byte within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte">
            <summary>
            Returns a random SByte
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte(System.SByte)">
            <summary>
            Returns a random sbyte less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte(System.SByte,System.SByte)">
            <summary>
            Returns a random sbyte within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextBool">
            <summary>
            Returns a random bool
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextBool(System.Double)">
            <summary>
            Returns a random bool based on the probablility a true result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDouble(System.Double)">
            <summary>
            Returns a random double between 0.0 and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random double within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat">
            <summary>
            Returns a random float.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat(System.Single)">
            <summary>
            Returns a random float between 0.0 and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat(System.Single,System.Single)">
            <summary>
            Returns a random float within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextEnum(System.Type)">
            <summary>
            Returns a random enum value of the specified Type as an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextEnum``1">
            <summary>
            Returns a random enum value of the specified Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString(System.Int32,System.String)">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <param name="outputLength">desired length of output string.</param>
            <param name="allowedChars">string representing the set of characters from which to construct the resulting string</param>
            <returns>A random string of arbitrary length</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString(System.Int32)">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <param name="outputLength">desired length of output string.</param>
            <returns>A random string of arbitrary length</returns>
            <remarks>Uses <see cref="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">DefaultStringChars</see> as the input character set </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <returns>A random string of the default length</returns>
            <remarks>Uses <see cref="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">DefaultStringChars</see> as the input character set </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal">
            <summary>
            Returns a random decimal.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal(System.Decimal)">
            <summary>
            Returns a random decimal between positive zero and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns a random decimal within a specified range, which is not
            permitted to exceed decimal.MaxVal in the current implementation.
            </summary>
            <remarks>
            A limitation of this implementation is that the range from min
            to max must not exceed decimal.MaxVal.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Internal.Randomizer.InitialSeed">
            <summary>
            Initial seed used to create randomizers for this run
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Reflect">
            <summary>
            Helper methods for inspecting a type by reflection. 
            
            Many of these methods take ICustomAttributeProvider as an 
            argument to avoid duplication, even though certain attributes can 
            only appear on specific types of members, like MethodInfo or Type.
            
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetMethodsWithAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Examine a fixture type and return an array of methods having a 
            particular attribute. The array is order with base methods first.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <param name="inherit">Specifies whether to search the fixture type inheritance chain</param>
            <returns>The array of methods found</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.HasMethodWithAttribute(System.Type,System.Type)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute. 
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetTypeArray(System.Object[])">
            <summary>
            Returns an array of types from an array of objects.
            Used because the compact framework doesn't support
            Type.GetTypeArray()
            </summary>
            <param name="objects">An array of objects</param>
            <returns>An array of Types</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseResult">
            <summary>
            Represents the result of running a single test case.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestResult">
            <summary>
            The TestResult class represents the result of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.MIN_DURATION">
            <summary>
            The minimum duration for tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.CHILD_ERRORS_MESSAGE">
            <summary>
            Error message for when child tests have errors
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.CHILD_IGNORE_MESSAGE">
            <summary>
            Error message for when child tests are ignored
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult._children">
            <summary>
            List of child results
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.#ctor(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Construct a test result given a Test
            </summary>
            <param name="test">The test to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.ToXml(System.Boolean)">
            <summary>
            Returns the Xml representation of the result.
            </summary>
            <param name="recursive">If true, descendant results are included</param>
            <returns>An XmlNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds the XML representation of the result as a child of the
            supplied parent node..
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddResult(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Adds a child result to this result, setting this result's
            ResultState to Failure if the child result failed.
            </summary>
            <param name="result">The result to be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState,System.String,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception)">
            <summary>
            Set the test result based on the type of exception thrown
            </summary>
            <param name="ex">The exception that was thrown</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Set the test result based on the type of exception thrown
            </summary>
            <param name="ex">The exception that was thrown</param>
            <param name="site">THe FailureSite to use in the result</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordTearDownException(System.Exception)">
            <summary>
            RecordTearDownException appends the message and stacktrace
            from an exception arising during teardown of the test
            to any previously recorded information, so that any
            earlier failure information is not lost. Note that
            calling Assert.Ignore, Assert.Inconclusive, etc. during
            teardown is treated as an error. If the current result
            represents a suite, it may show a teardown error even
            though all contained tests passed.
            </summary>
            <param name="ex">The Exception to be recorded</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddReasonElement(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Adds a reason element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new reason element.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddFailureElement(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Adds a failure element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new failure element.</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Test">
            <summary>
            Gets the test with which this result is associated.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which 
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Duration">
            <summary>
            Gets or sets the elapsed time for running the test in seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.StartTime">
            <summary>
            Gets or sets the time the test started running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.EndTime">
            <summary>
            Gets or sets the time the test finished running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.AssertCount">
            <summary>
            Gets or sets the count of asserts executed
            when running the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            Test HasChildren before accessing Children to avoid
            the creation of an empty collection.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.OutWriter">
            <summary>
            Gets a TextWriter, which will write output to be included in the result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Output">
            <summary>
            Gets any text output written to this result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseResult.#ctor(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Construct a TestCaseResult based on a TestMethod
            </summary>
            <param name="test">A TestMethod to which the result applies.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuiteResult">
            <summary>
            Represents the result of running a test suite
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Construct a TestSuiteResult base on a TestSuite
            </summary>
            <param name="suite">The TestSuite to which the result applies</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.AddResult(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Add a child result
            </summary>
            <param name="result">The child result to be added</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.StackFilter">
            <summary>
            StackFilter class is used to remove internal NUnit
            entries from a stack trace so that the resulting
            trace provides better information about the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.Filter(System.String)">
            <summary>
            Filters a raw stack trace and returns the result.
            </summary>
            <param name="rawTrace">The original stack trace</param>
            <returns>A filtered stack trace</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.StringUtil">
            <summary>
            Provides methods to support legacy string comparison methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StringUtil.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality, ignoring case if requested.
            </summary>
            <param name="strA">The first string.</param>
            <param name="strB">The second string..</param>
            <param name="ignoreCase">if set to <c>true</c>, the case of the letters in the strings is ignored.</param>
            <returns>Zero if the strings are equivalent, a negative number if strA is sorted first, a positive number if
            strB is sorted first</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.StringUtil.StringsEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality, ignoring case if requested.
            </summary>
            <param name="strA">The first string.</param>
            <param name="strB">The second string..</param>
            <param name="ignoreCase">if set to <c>true</c>, the case of the letters in the strings is ignored.</param>
            <returns>True if the strings are equivalent, false if not.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseParameters">
            <summary>
            The TestCaseParameters class encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestParameters">
            <summary>
            TestParameters is the abstract base class for all classes
            that know how to provide data for constructing a test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(NUnit.Framework.Interfaces.ITestData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestData
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Applies ParameterSet _values to the test itself.
            </summary>
            <param name="test">A test.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.RunState">
            <summary>
            The RunState for this set of parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.Arguments">
            <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.TestName">
            <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.OriginalArguments">
            <summary>
            The original arguments provided by the user,
            used for display purposes.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestCaseParameters._expectedResult">
            <summary>
            The expected result to be returned
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(NUnit.Framework.Interfaces.ITestCaseData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseParameters.ExpectedResult">
            <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseParameters.HasExpectedResult">
            <summary>
            Gets a value indicating whether an expected result was specified.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionContext">
             <summary>
             Helper class used to save and restore certain static or
             singleton settings in the environment that affect tests
             or which might be changed by the user tests.
            
             An internal class is used to hold settings and a stack
             of these objects is pushed and popped as Save and Restore
             are called.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._priorContext">
            <summary>
            Link to a prior saved context
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._executionStatus">
            <summary>
            Indicates that a stop has been requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._listener">
            <summary>
            The event listener currently receiving notifications
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._assertCount">
            <summary>
            The number of assertions for the current test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._currentCulture">
            <summary>
            The current culture
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._currentUICulture">
            <summary>
            The current UI culture
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._currentResult">
            <summary>
            The current test result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
            <param name="other">An existing instance of TestExecutionContext.</param>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext.current">
            <summary>
            The current context, head of the list of saved contexts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.ClearCurrentContext">
            <summary>
            Clear the current context. This is provided to
            prevent "leakage" of the CallContext containing
            the current context back to any runners.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.UpdateContextFromEnvironment">
            <summary>
            Record any changes in the environment made by
            the test code in the execution context so it
            will be passed on to lower level tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.EstablishExecutionEnvironment">
            <summary>
            Set up the execution environment to match a context.
            Note that we may be running on the same thread where the
            context was initially created or on a different thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount">
            <summary>
            Increments the assert count by one.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount(System.Int32)">
            <summary>
            Increments the assert count by a specified amount.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentTest">
            <summary>
            Gets or sets the current test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StartTime">
            <summary>
            The time the current test started execution
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StartTicks">
            <summary>
            The time the current test started in Ticks
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentResult">
            <summary>
            Gets or sets the current test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.OutWriter">
            <summary>
            Gets a TextWriter that will send output to the current test result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestObject">
            <summary>
            The current test object - that is the user fixture
            object on which tests are being executed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.WorkDirectory">
            <summary>
            Get or set the working directory
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StopOnError">
            <summary>
            Get or set indicator that run should stop on the first error
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.ExecutionStatus">
            <summary>
            Gets an enum indicating whether a stop has been requested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Listener">
            <summary>
            The current test event listener
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Dispatcher">
            <summary>
            The current WorkItemDispatcher
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.ParallelScope">
            <summary>
            The ParallelScope to be used by tests running in this context.
            For builds with out the parallel feature, it has no effect.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.RandomGenerator">
            <summary>
            Gets the RandomGenerator specific to this Test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.AssertCount">
            <summary>
            Gets the assert count.
            </summary>
            <value>The assert count.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestCaseTimeout">
            <summary>
            Gets or sets the test case timeout value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.UpstreamActions">
            <summary>
            Gets a list of ITestActions set by upstream tests
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentCulture">
            <summary>
            Saves or restores the CurrentCulture
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentUICulture">
            <summary>
            Saves or restores the CurrentUICulture
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionStatus">
            <summary>
            Enumeration indicating whether the tests are 
            running normally or being cancelled.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.Running">
            <summary>
            Running normally with no stop requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.StopRequested">
            <summary>
            A graceful stop has been requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.AbortRequested">
            <summary>
            A forced stop has been requested
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixtureParameters">
            <summary>
            The TestCaseParameters class encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(NUnit.Framework.Interfaces.ITestFixtureData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFixtureParameters.TypeArgs">
            <summary>
            Type arguments used to create a generic fixture instance
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestListener">
            <summary>
            TestListener provides an implementation of ITestListener that
            does nothing. It is used only through its NULL property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test case has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.#ctor">
            <summary>
            Construct a new TestListener - private so it may not be used.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestListener.NULL">
            <summary>
            Get a listener that does nothing
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestNameGenerator">
            <summary>
            TestNameGenerator is able to create test names according to
            a coded pattern.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.#ctor(System.String)">
            <summary>
            Construct a TestNameGenerator
            </summary>
            <param name="pattern">The pattern used by this generator.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Get the display name for a TestMethod and it's arguments
            </summary>
            <param name="testMethod">A TestMethod</param>
            <returns>The display name</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod,System.Object[])">
            <summary>
            Get the display name for a TestMethod and it's arguments
            </summary>
            <param name="testMethod">A TestMethod</param>
            <param name="args">Arguments to be used</param>
            <returns>The display name</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(System.Reflection.MethodInfo)">
            <summary>
            Get the display name for a MethodInfo
            </summary>
            <param name="method">A MethodInfo</param>
            <returns>The display name</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Get the display name for a method with args
            </summary>
            <param name="method">A MethodInfo</param>
            <param name="args">Argument list for the method</param>
            <returns>The display name</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestProgressReporter">
            <summary>
            TestProgressReporter translates ITestListener events into
            the async callbacks that are used to inform the client
            software about the progress of a test run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.#ctor(System.Web.UI.ICallbackEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestProgressReporter"/> class.
            </summary>
            <param name="handler">The callback handler to be used for reporting progress.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test has finished. Sends a result summary to the callback.
            to 
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.GetParent(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Returns the parent test item for the targer test item if it exists
            </summary>
            <param name="test"></param>
            <returns>parent test item</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.FormatAttributeValue(System.String)">
            <summary>
            Makes a string safe for use as an attribute, replacing
            characters characters that can't be used with their
            corresponding xml representations.
            </summary>
            <param name="original">The string to be used</param>
            <returns>A new string with the _values replaced</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedFixtureSuite">
            <summary>
            ParameterizedFixtureSuite serves as a container for the set of test 
            fixtures created from a given Type using various parameters.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuite">
            <summary>
            TestSuite represents a composite test, which contains other tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Test">
            <summary>
            The Test abstract class represents a test within the framework.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test._nextID">
            <summary>
            Static value to seed ids. It's started at 1000 so any
            uninitialized ids will stand out.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.setUpMethods">
            <summary>
            The SetUp methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test.tearDownMethods">
            <summary>
            The teardown methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String)">
            <summary>
            Constructs a test given its name
            </summary>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String,System.String)">
            <summary>
            Constructs a test given the path through the
            test hierarchy to its parent and a name.
            </summary>
            <param name="pathName">The parent tests full name</param>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
             TODO: Documentation needed for constructor
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Construct a test from a MethodInfo
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.MakeTestResult">
            <summary>
            Creates a TestResult for this test.
            </summary>
            <returns>A TestResult suitable for this type of test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ApplyAttributesToTest(System.Reflection.MemberInfo)">
            <summary>
            Modify a newly constructed test by applying any of NUnit's common
            attributes, based on a supplied ICustomAttributeProvider, which is
            usually the reflection element from which the test was constructed,
            but may not be in some instances. The attributes retrieved are 
            saved for use in subsequent operations.
            </summary>
            <param name="provider">An object deriving from MemberInfo</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ApplyAttributesToTest(System.Reflection.Assembly)">
            <summary>
            Modify a newly constructed test by applying any of NUnit's common
            attributes, based on a supplied ICustomAttributeProvider, which is
            usually the reflection element from which the test was constructed,
            but may not be in some instances. The attributes retrieved are 
            saved for use in subsequent operations.
            </summary>
            <param name="provider">An object deriving from MemberInfo</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.PopulateTestNode(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Add standard attributes and members to a test node.
            </summary>
            <param name="thisNode"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ToXml(System.Boolean)">
            <summary>
            Returns the Xml representation of the test
            </summary>
            <param name="recursive">If true, include child tests recursively</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.CompareTo(System.Object)">
            <summary>
            Compares this test to another test for sorting purposes
            </summary>
            <param name="obj">The other test</param>
            <returns>Value of -1, 0 or +1 depending on whether the current test is less than, equal to or greater than the other test</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Id">
            <summary>
            Gets or sets the id of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Name">
            <summary>
            Gets or sets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.FullName">
            <summary>
            Gets or sets the fully qualified name of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.ClassName">
            <summary>
            Gets the name of the class containing this test. Returns
            null if the test is not associated with a class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.MethodName">
            <summary>
            Gets the name of the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TypeInfo">
            <summary>
            Gets the TypeInfo of the fixture used in running this test
            or null if no fixture type is associated with it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.RunState">
            <summary>
            Whether or not the test should be run
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestType">
            <summary>
            Gets a string representing the type of test. Used as an attribute
            value in the XML representation of a test and has no other
            function in the framework.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Properties">
            <summary>
            Gets the properties for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.IsSuite">
            <summary>
            Returns true if this is a TestSuite
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Parent">
            <summary>
            Gets the parent as a Test object.
            Used by the core to set the parent.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Fixture">
            <summary>
            Gets or sets a fixture object for running this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.IdPrefix">
            <summary>
            Static prefix used for ids in this AppDomain.
            Set by FrameworkController.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Seed">
            <summary>
            Gets or Sets the Int value representing the seed for the RandomGenerator
            </summary>
            <value></value>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.tests">
            <summary>
            Our collection of child tests
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="parentSuiteName">Name of the parent suite.</param>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Sort">
            <summary>
            Sorts tests under this suite.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Add(NUnit.Framework.Internal.Test)">
            <summary>
            Adds a test to the suite.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.MakeTestResult">
            <summary>
            Overridden to return a TestSuiteResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.CheckSetUpTearDownMethods(System.Type)">
            <summary>
            Check that setup and teardown methods marked by certain attributes
            meet NUnit's requirements and mark the tests not runnable otherwise.
            </summary>
            <param name="attrType">The attribute type to check for</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>The list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.Arguments">
            <summary>
            The arguments to use in creating the fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.MaintainTestOrder">
            <summary>
            Set to true to suppress sorting this suite's contents
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedFixtureSuite.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.ParameterizedFixtureSuite"/> class.
            </summary>
            <param name="typeInfo">The ITypeInfo for the type that represents the suite.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedFixtureSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
            <value></value>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedMethodSuite">
            <summary>
            ParameterizedMethodSuite holds a collection of individual
            TestMethods with their arguments applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedMethodSuite.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Construct from a MethodInfo
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedMethodSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
            <value></value>
        </member>
        <member name="T:NUnit.Framework.Internal.SetUpFixture">
            <summary>
            SetUpFixture extends TestSuite and supports
            Setup and TearDown methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SetUpFixture.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.SetUpFixture"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestAssembly">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestAssembly"/> class
            specifying the Assembly and the path from which it was loaded.
            </summary>
            <param name="assembly">The assembly this test represents.</param>
            <param name="path">The path used to load the assembly.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestAssembly"/> class
            for a path which could not be loaded.
            </summary>
            <param name="path">The path used to load the assembly.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestAssembly.Assembly">
            <summary>
            Gets the Assembly represented by this instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestAssembly.TestType">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixture">
            <summary>
            TestFixture is a surrogate for a user test fixture class,
            containing one or more tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestFixture"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestMethod">
            <summary>
            The TestMethod class represents a Test implemented as a method.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestMethod.parms">
            <summary>
            The ParameterSet used to create this test method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.MakeTestResult">
            <summary>
            Overridden to return a TestCaseResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns a TNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.MethodName">
            <summary>
            Returns the name of the method
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeHelper">
            <summary>
            TypeHelper provides static methods that operate on Types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TypeHelper.NonmatchingType">
            <summary>
            A special value, which is used to indicate that BestCommonType() method
            was unable to find a common type for the specified arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type)">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type,System.Object[])">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <param name="arglist">The arglist provided.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.BestCommonType(System.Type,System.Type)">
            <summary>
            Returns the best fit for a common type to be used in
            matching actual arguments to a methods Type parameters.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
            <returns>Either type1 or type2, depending on which is more general.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="type">The type to be examined.</param>
            <returns>
            	<c>true</c> if the specified type is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.ConvertArgumentList(System.Object[],NUnit.Framework.Interfaces.IParameterInfo[])">
            <summary>
            Convert an argument list to the required parameter types.
            Currently, only widening numeric conversions are performed.
            </summary>
            <param name="arglist">An array of args to be converted</param>
            <param name="parameters">A ParameterInfo[] whose types will be used as targets</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.CanDeduceTypeArgsFromArgs(System.Type,System.Object[],System.Type[]@)">
            <summary>
            Determines whether this instance can deduce type args for a generic type from the supplied arguments.
            </summary>
            <param name="type">The type to be examined.</param>
            <param name="arglist">The arglist.</param>
            <param name="typeArgsOut">The type args to be used.</param>
            <returns>
            	<c>true</c> if this the provided args give sufficient information to determine the type args to be used; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetEnumValues(System.Type)">
            <summary>
            Gets the _values for an enumeration, using Enum.GetTypes
            where available, otherwise through reflection.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetEnumNames(System.Type)">
            <summary>
            Gets the ids of the _values for an enumeration, 
            using Enum.GetNames where available, otherwise
            through reflection.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeWrapper">
            <summary>
            The TypeWrapper class wraps a Type so it may be used in
            a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.#ctor(System.Type)">
            <summary>
            Construct a TypeWrapper for a specified Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.IsType(System.Type)">
            <summary>
            Returns true if the Type wrapped is T
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetDisplayName">
            <summary>
            Get the display name for this type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetDisplayName(System.Object[])">
            <summary>
            Get the display name for an object of this type, constructed with the specified args.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.MakeGenericType(System.Type[])">
            <summary>
            Returns a new ITypeInfo representing an instance of this generic Type using the supplied Type arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetGenericTypeDefinition">
            <summary>
            Returns a Type representing a generic type definition from which this Type can be constructed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Returns a value indicating whether the type has an attribute of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.HasMethodWithAttribute(System.Type)">
            <summary>
            Returns a flag indicating whether this type has a method with an attribute of the specified type.
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetMethods(NUnit.Framework.Compatibility.BindingFlags)">
            <summary>
            Returns an array of IMethodInfos for methods of this Type
            that match the specified flags.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.HasConstructor(System.Type[])">
            <summary>
            Returns a value indicating whether this Type has a public constructor taking the specified argument Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.Construct(System.Object[])">
            <summary>
            Construct an object of this Type, using the specified arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.ToString">
            <summary>
            Override ToString() so that error messages in NUnit's own tests make sense
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Type">
            <summary>
            Gets the underlying Type on which this TypeWrapper is based.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.BaseType">
            <summary>
            Gets the base type of this type as an ITypeInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Name">
            <summary>
            Gets the Name of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.FullName">
            <summary>
            Gets the FullName of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Assembly">
            <summary>
            Gets the assembly in which the type is declared
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Namespace">
            <summary>
            Gets the namespace of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsAbstract">
            <summary>
            Gets a value indicating whether the type is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsGenericType">
            <summary>
            Gets a value indicating whether the Type is a generic Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the Type has generic parameters that have not been replaced by specific Types.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether the Type is a generic Type definition
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsSealed">
            <summary>
            Gets a value indicating whether the type is sealed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsStaticClass">
            <summary>
            Gets a value indicating whether this type represents a static class.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Is">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable to the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable to the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InRange(System.IComparable,System.IComparable)">
            <summary>
            Returns a constraint that tests whether the actual value falls
            inclusively within a specified range.
            </summary>
            <remarks>from must be less than or equal to true</remarks> 
            <param name="from">Inclusive beginning of the range. Must be less than or equal to to.</param>
            <param name="to">Inclusive end of the range. Must be greater than or equal to from.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Is.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Unique">
            <summary>
            Returns a constraint that tests whether a collection 
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="T:NUnit.Framework.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.List">
            <summary>
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.List.Map(System.Collections.ICollection)">
            <summary>
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the _values of a property
            </summary>
            <param name="name">The collection of property _values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.SpecialValue">
            <summary>
            The SpecialValue enum is used to represent TestCase arguments
            that cannot be used as arguments to an Attribute.
            </summary>
        </member>
        <member name="F:NUnit.Framework.SpecialValue.Null">
            <summary>
            Null represents a null value, which cannot be used as an 
            argument to an attriute under .NET 1.x
            </summary>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is not found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.TestCaseData">
            <summary>
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It is derived from TestCaseParameters and adds a
            fluent syntax for use in initializing the test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Returns(System.Object)">
            <summary>
            Sets the expected result for the test
            </summary>
            <param name="result">The expected result</param>
            <returns>A modified TestCaseData</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetName(System.String)">
            <summary>
            Sets the name of the test case
            </summary>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetDescription(System.String)">
            <summary>
            Sets the description for the test case
            being constructed.
            </summary>
            <param name="description">The description.</param>
            <returns>The modified TestCaseData instance.</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetCategory(System.String)">
            <summary>
            Applies a category to the test
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.String)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Int32)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Double)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit">
            <summary>
            Marks the test case as explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit(System.String)">
            <summary>
            Marks the test case as explicit, specifying the reason.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore(System.String)">
            <summary>
            Ignores this TestCase, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.TestContext">
            <summary>
            Provide the context information of the current test.
            This is an adapter for the internal ExecutionContext
            class, hiding the internals from the user test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Construct a TestContext for an ExecutionContext
            </summary>
            <param name="testExecutionContext">The ExecutionContext to adapt</param>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Boolean)">
            <summary>Write the string representation of a boolean value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Char)">
            <summary>Write a char to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Char[])">
            <summary>Write a char array to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Double)">
            <summary>Write the string representation of a double to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Int32)">
            <summary>Write the string representation of an Int32 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Int64)">
            <summary>Write the string representation of an Int64 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Decimal)">
            <summary>Write the string representation of a decimal value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Object)">
            <summary>Write the string representation of an object to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Single)">
            <summary>Write the string representation of a Single value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String)">
            <summary>Write a string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.UInt32)">
            <summary>Write the string representation of a UInt32 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.UInt64)">
            <summary>Write the string representation of a UInt64 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object[])">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine">
            <summary>Write a line terminator to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Boolean)">
            <summary>Write the string representation of a boolean value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Char)">
            <summary>Write a char to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Char[])">
            <summary>Write a char array to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Double)">
            <summary>Write the string representation of a double to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Int32)">
            <summary>Write the string representation of an Int32 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Int64)">
            <summary>Write the string representation of an Int64 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Decimal)">
            <summary>Write the string representation of a decimal value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Object)">
            <summary>Write the string representation of an object to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Single)">
            <summary>Write the string representation of a Single value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String)">
            <summary>Write a string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.UInt32)">
            <summary>Write the string representation of a UInt32 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.UInt64)">
            <summary>Write the string representation of a UInt64 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object[])">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.CurrentContext">
            <summary>
            Get the current test context. This is created
            as needed. The user may save the context for
            use within a test, but it should not be used
            outside the test for which it is created.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Out">
            <summary>
            Gets a TextWriter that will send output to the current test result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Test">
            <summary>
            Get a representation of the current test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Result">
            <summary>
            Gets a Representation of the TestResult for the current test. 
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.WorkDirectory">
            <summary>
            Gets the directory to be used for outputting files created
            by this test run.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Random">
            <summary>
            Gets the random generator.
            </summary>
            <value>
            The random generator.
            </value>
        </member>
        <member name="T:NUnit.Framework.TestContext.TestAdapter">
            <summary>
            TestAdapter adapts a Test for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.TestAdapter.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestAdapter for a Test
            </summary>
            <param name="test">The Test to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.ID">
            <summary>
            Gets the unique Id of a test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Name">
            <summary>
            The name of the test, which may or may not be
            the same as the method name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.MethodName">
            <summary>
            The name of the method representing the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.FullName">
            <summary>
            The FullName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.ClassName">
            <summary>
            The ClassName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Properties">
            <summary>
            The properties of the test.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.ResultAdapter">
            <summary>
            ResultAdapter adapts a TestResult for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.ResultAdapter.#ctor(NUnit.Framework.Internal.TestResult)">
            <summary>
            Construct a ResultAdapter for a TestResult
            </summary>
            <param name="result">The TestResult to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Outcome">
            <summary>
            Gets a ResultState representing the outcome of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.StackTrace">
            <summary>
            Gets any stacktrace associated with an
            error or failure.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureData">
            <summary>
            The TestFixtureData class represents a set of arguments
            and other parameter info to be used for a parameterized
            fixture. It is derived from TestFixtureParameters and adds a
            fluent syntax for use in initializing the fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Explicit">
            <summary>
            Marks the test fixture as explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Explicit(System.String)">
            <summary>
            Marks the test fixture as explicit, specifying the reason.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Ignore(System.String)">
            <summary>
            Ignores this TestFixture, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Throws">
            <summary>
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf(System.Type)">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf``1">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf(System.Type)">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf``1">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Exception">
            <summary>
            Creates a constraint specifying an expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InnerException">
            <summary>
            Creates a constraint specifying an exception with a given InnerException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.TargetInvocationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentException">
            <summary>
            Creates a constraint specifying an expected ArgumentException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentNullException">
            <summary>
            Creates a constraint specifying an expected ArgumentNUllException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InvalidOperationException">
            <summary>
            Creates a constraint specifying an expected InvalidOperationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Nothing">
            <summary>
            Creates a constraint specifying that no exception is thrown
            </summary>
        </member>
    </members>
</doc>
